<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title></title>
      <link href="/2022/02/25/index/"/>
      <url>/2022/02/25/index/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>【异步爬虫】学习笔记</title>
      <link href="/2022/02/24/yi-bu-pa-chong-xue-xi-bi-ji/"/>
      <url>/2022/02/24/yi-bu-pa-chong-xue-xi-bi-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="一、asyncio"><a href="#一、asyncio" class="headerlink" title="一、asyncio"></a>一、asyncio</h1><ul><li><strong>event_loop</strong>：事件循环，相当于一个无限循环，我们可以把一些函数注册到这个事件循环上，当满足条件发生的时候，就会调用对应的处理方法。</li><li><strong>coroutine</strong>：中文翻译叫协程，在 Python 中常指代为协程对象类型，我们可以将协程对象注册到时间循环中，它会被事件循环调用。我们可以使用 - async 关键字来定义一个方法，这个方法在调用时不会立即被执行，而是返回一个协程对象。</li><li><strong>task</strong>：任务，它是对协程对象的进一步封装，包含了任务的各个状态。</li><li><strong>future</strong>：代表将来执行或没有执行的任务的结果，实际上和 task 没有本质区别。</li></ul><h2 id="1、定义协程"><a href="#1、定义协程" class="headerlink" title="1、定义协程"></a>1、定义协程</h2><p>第一个例子</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> asyncio<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">execute</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Number:'</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span>coroutine <span class="token operator">=</span> execute<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'After calling execute'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Coroutine:'</span><span class="token punctuation">,</span> coroutine<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'*'</span><span class="token operator">*</span><span class="token number">40</span><span class="token punctuation">,</span> <span class="token string">'分割线'</span><span class="token punctuation">,</span> <span class="token string">'*'</span><span class="token operator">*</span><span class="token number">40</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'After calling loop'</span><span class="token punctuation">)</span>loop <span class="token operator">=</span> asyncio<span class="token punctuation">.</span>get_event_loop<span class="token punctuation">(</span><span class="token punctuation">)</span>loop<span class="token punctuation">.</span>run_until_complete<span class="token punctuation">(</span>coroutine<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出结果为：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">After calling executeCoroutine<span class="token punctuation">:</span> <span class="token operator">&lt;</span>coroutine <span class="token builtin">object</span> execute at <span class="token number">0x000002836EB16C40</span><span class="token operator">&gt;</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span> 分割线 <span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span>After calling loopNumber<span class="token punctuation">:</span> <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>首先，引入<code>asyncio</code>这个包，这样菜鸟使用<code>async</code>和<code>await</code>；<br>然后，使用<code>async</code>定义一个<code>execute()</code>方法，这个方法的功能是，接收一个数字之后，打印出这个数字；<br>紧接着，尝试直接调用这个方法，但这个方法没有执行，而是返回了一个<code>coroutine协程对象</code>；<br>之后，使用<code>get_event_loop()方法</code>创建一个事件循环<code>loop</code>，并调用<code>loop对象</code>的<code>run_until_complete()方法</code>将协程注册到<code>loop</code>中，并启动；<br>这次之后，就可以看到<code>execute()</code>方法输出的结果。</p><p><strong>结论：</strong> <code>async</code>定义的方法会编程一个无法执行的<code>coroutine协程对象</code>，必须将其注册到事件循环中才能执行。</p><hr><p>一开始，还提到了<code>task</code>，相对于<code>coroutine对象</code>，它多了运行状态，我们可以根据这些状态来获取协程对象的执行情况。</p><p><strong>上个例子，当我们将<code>coroutine对象</code>传递给<code>run_until_complete()方法</code>的时候，实际上它进行了一个操作就是将<code>coroutine</code>封装成了<code>task对象</code></strong></p><ul><li>实操验证一下：</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> asyncio<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">execute</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Number:'</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span>coroutine <span class="token operator">=</span> execute<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'After calling execute'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Coroutine:'</span><span class="token punctuation">,</span> coroutine<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'*'</span><span class="token operator">*</span><span class="token number">40</span><span class="token punctuation">,</span> <span class="token string">'分割线'</span><span class="token punctuation">,</span> <span class="token string">'*'</span><span class="token operator">*</span><span class="token number">40</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'After calling loop'</span><span class="token punctuation">)</span>loop <span class="token operator">=</span> asyncio<span class="token punctuation">.</span>get_event_loop<span class="token punctuation">(</span><span class="token punctuation">)</span>task <span class="token operator">=</span> loop<span class="token punctuation">.</span>create_task<span class="token punctuation">(</span>coroutine<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'task:'</span><span class="token punctuation">,</span> task<span class="token punctuation">)</span>loop<span class="token punctuation">.</span>run_until_complete<span class="token punctuation">(</span>task<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'task:'</span><span class="token punctuation">,</span> task<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>输出结果：<pre class="line-numbers language-python" data-language="python"><code class="language-python">After calling executeCoroutine<span class="token punctuation">:</span> <span class="token operator">&lt;</span>coroutine <span class="token builtin">object</span> execute at <span class="token number">0x000001A58E626B40</span><span class="token operator">&gt;</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span> 分割线 <span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span>After calling looptask<span class="token punctuation">:</span> <span class="token operator">&lt;</span>Task pending name<span class="token operator">=</span><span class="token string">'Task-1'</span> coro<span class="token operator">=</span><span class="token operator">&lt;</span>execute<span class="token punctuation">(</span><span class="token punctuation">)</span> running at ‘这里是文件路径’<span class="token punctuation">:</span><span class="token number">10</span><span class="token operator">&gt;&gt;</span>Number<span class="token punctuation">:</span> <span class="token number">1</span>task<span class="token punctuation">:</span> <span class="token operator">&lt;</span>Task finished name<span class="token operator">=</span><span class="token string">'Task-1'</span> coro<span class="token operator">=</span><span class="token operator">&lt;</span>execute<span class="token punctuation">(</span><span class="token punctuation">)</span> done<span class="token punctuation">,</span> defined at ‘这里是文件路径’<span class="token punctuation">:</span><span class="token number">10</span><span class="token operator">&gt;</span> result<span class="token operator">=</span><span class="token boolean">None</span><span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>这里在定义<code>loop对象</code>之后，紧接着调用了它的<code>create_task()方法</code>将<code>coroutine对象</code>转化为了<code>task对象</code>，然后打印输出，发现它是<strong>pending</strong>状态；<br>然后，将<code>task对象</code>添加到事件循环中得到执行，紧接着再打印输出，发现它的状态变成了<strong>finished</strong>，与此同时，还可以发现result变成了1（也就是定义的<code>execute()方法</code>的返回结果）。</li></ul><hr><p>直接通过asyncio的ensure_future()方法，不需要借助loop来定义，也可以返回task对象。</p><ul><li>实操验证一下：</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> asyncio<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">execute</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Number:'</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span>coroutine <span class="token operator">=</span> execute<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'After calling execute'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Coroutine:'</span><span class="token punctuation">,</span> coroutine<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'*'</span><span class="token operator">*</span><span class="token number">40</span><span class="token punctuation">,</span> <span class="token string">'分割线'</span><span class="token punctuation">,</span> <span class="token string">'*'</span><span class="token operator">*</span><span class="token number">40</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'After calling loop'</span><span class="token punctuation">)</span>task <span class="token operator">=</span> asyncio<span class="token punctuation">.</span>ensure_future<span class="token punctuation">(</span>coroutine<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'task:'</span><span class="token punctuation">,</span> task<span class="token punctuation">)</span>loop <span class="token operator">=</span> asyncio<span class="token punctuation">.</span>get_event_loop<span class="token punctuation">(</span><span class="token punctuation">)</span>loop<span class="token punctuation">.</span>run_until_complete<span class="token punctuation">(</span>task<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'task:'</span><span class="token punctuation">,</span> task<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>输出结果：<pre class="line-numbers language-python" data-language="python"><code class="language-python">After calling executeCoroutine<span class="token punctuation">:</span> <span class="token operator">&lt;</span>coroutine <span class="token builtin">object</span> execute at <span class="token number">0x000001A58E626B40</span><span class="token operator">&gt;</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span> 分割线 <span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span>After calling looptask<span class="token punctuation">:</span> <span class="token operator">&lt;</span>Task pending name<span class="token operator">=</span><span class="token string">'Task-1'</span> coro<span class="token operator">=</span><span class="token operator">&lt;</span>execute<span class="token punctuation">(</span><span class="token punctuation">)</span> running at ‘这里是文件路径’<span class="token punctuation">:</span><span class="token number">10</span><span class="token operator">&gt;&gt;</span>Number<span class="token punctuation">:</span> <span class="token number">1</span>task<span class="token punctuation">:</span> <span class="token operator">&lt;</span>Task finished name<span class="token operator">=</span><span class="token string">'Task-1'</span> coro<span class="token operator">=</span><span class="token operator">&lt;</span>execute<span class="token punctuation">(</span><span class="token punctuation">)</span> done<span class="token punctuation">,</span> defined at ‘这里是文件路径’<span class="token punctuation">:</span><span class="token number">10</span><span class="token operator">&gt;</span> result<span class="token operator">=</span><span class="token boolean">None</span><span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>和上例的结果是一样的<h2 id="2、asyncio的一些方法"><a href="#2、asyncio的一些方法" class="headerlink" title="2、asyncio的一些方法"></a>2、asyncio的一些方法</h2></li><li><strong>官方文档</strong>：<a href="https://docs.python.org/zh-cn/3/library/asyncio-task.html">协程与任务</a></li></ul><hr><h3 id="①、asyncio-wait"><a href="#①、asyncio-wait" class="headerlink" title="①、asyncio.wait()"></a>①、asyncio.wait()</h3><p><strong>可以将一个操作分成多个部分并分开执行，而wait(tasks)可以被用于中断任务集合(tasks)中的某个被事件循环轮询到的任务，直到该协程的其他后台操作完成才被唤醒。</strong></p><ul><li>例如：<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> time<span class="token keyword">import</span> asyncio<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">task_1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'开始运行IO任务1...'</span><span class="token punctuation">)</span>    <span class="token keyword">await</span> asyncio<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>  <span class="token comment"># 假设该任务耗时3s</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'IO任务1已完成，耗时3s'</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> task_1<span class="token punctuation">.</span>__name__<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">task_2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'开始运行IO任务2...'</span><span class="token punctuation">)</span>    <span class="token keyword">await</span> asyncio<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>  <span class="token comment"># 假设该任务耗时2s</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'IO任务2已完成，耗时2s'</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> task_2<span class="token punctuation">.</span>__name__<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 调用方</span>    tasks <span class="token operator">=</span> <span class="token punctuation">[</span>task_1<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> task_2<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span>  <span class="token comment"># 把所有任务添加到task中</span>    done<span class="token punctuation">,</span>pending <span class="token operator">=</span> <span class="token keyword">await</span> asyncio<span class="token punctuation">.</span>wait<span class="token punctuation">(</span>tasks<span class="token punctuation">)</span>  <span class="token comment"># 子生成器</span>    <span class="token keyword">for</span> r <span class="token keyword">in</span> done<span class="token punctuation">:</span>  <span class="token comment"># done和pending都是一个任务，所以返回结果需要逐个调用result()</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'协程无序返回值：'</span><span class="token operator">+</span>r<span class="token punctuation">.</span>result<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    start <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>    loop <span class="token operator">=</span> asyncio<span class="token punctuation">.</span>get_event_loop<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 创建一个事件循环对象loop</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        loop<span class="token punctuation">.</span>run_until_complete<span class="token punctuation">(</span>main<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># 完成事件循环，直到最后一个任务结束</span>    <span class="token keyword">finally</span><span class="token punctuation">:</span>        loop<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 结束事件循环</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'所有IO任务总耗时%.5f秒'</span> <span class="token operator">%</span> <span class="token builtin">float</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span>start<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>输出结果：</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">开始运行IO任务<span class="token number">1.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>开始运行IO任务<span class="token number">2.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>IO任务<span class="token number">2</span>已完成，耗时2sIO任务<span class="token number">1</span>已完成，耗时3s协程无序返回值：task_2协程无序返回值：task_1所有IO任务总耗时<span class="token number">3.00769</span>秒<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>其中：</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">done<span class="token punctuation">,</span> pending <span class="token operator">=</span> <span class="token keyword">await</span> asyncio<span class="token punctuation">.</span>wait<span class="token punctuation">(</span>aws<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>此处并发运行传入的<code>aws(awaitable objects)</code>，同时通过<code>await</code>返回一个包含(done, pending)的元组，<code>done</code>表示已完成的任务列表，<code>pending</code>表示未完成的任务列表。<br><strong>注：</strong><br>①只有当给<code>wait()</code>传入<code>timeout参数</code>时才有可能产生<code>pending</code>列表。<br>②通过<code>wait()</code>返回的结果集是按照事件循环中的任务完成顺序排列的，所以其往往和原始任务顺序不同。</p><h3 id="②、asyncio-gather"><a href="#②、asyncio-gather" class="headerlink" title="②、asyncio.gather()"></a>②、asyncio.gather()</h3><p><strong>如果只关心协程并发运行后的结果集合，可以使用<code>gather()</code>，它不仅通过await返回仅一个结果集，而且这个结果集的结果顺序是传入任务的原始顺序。</strong></p><ul><li>例如：</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> time<span class="token keyword">import</span> asyncio<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">taskIO_1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'开始运行IO任务1...'</span><span class="token punctuation">)</span>    <span class="token keyword">await</span> asyncio<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>  <span class="token comment"># 假设该任务耗时3s</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'IO任务1已完成，耗时3s'</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> taskIO_1<span class="token punctuation">.</span>__name__<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">taskIO_2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'开始运行IO任务2...'</span><span class="token punctuation">)</span>    <span class="token keyword">await</span> asyncio<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>  <span class="token comment"># 假设该任务耗时2s</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'IO任务2已完成，耗时2s'</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> taskIO_2<span class="token punctuation">.</span>__name__<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment"># 调用方</span>    resualts <span class="token operator">=</span> <span class="token keyword">await</span> asyncio<span class="token punctuation">.</span>gather<span class="token punctuation">(</span>taskIO_1<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> taskIO_2<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># 子生成器</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>resualts<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    start <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>    loop <span class="token operator">=</span> asyncio<span class="token punctuation">.</span>get_event_loop<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 创建一个事件循环对象loop</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        loop<span class="token punctuation">.</span>run_until_complete<span class="token punctuation">(</span>main<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># 完成事件循环，直到最后一个任务结束</span>    <span class="token keyword">finally</span><span class="token punctuation">:</span>        loop<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 结束事件循环</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'所有IO任务总耗时%.5f秒'</span> <span class="token operator">%</span> <span class="token builtin">float</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span>start<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>结果为：</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">开始运行IO任务<span class="token number">1.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>开始运行IO任务<span class="token number">2.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>IO任务<span class="token number">2</span>已完成，耗时2sIO任务<span class="token number">1</span>已完成，耗时3s<span class="token punctuation">[</span><span class="token string">'taskIO_1'</span><span class="token punctuation">,</span> <span class="token string">'taskIO_2'</span><span class="token punctuation">]</span>所有IO任务总耗时<span class="token number">3.00936</span>秒<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>gather()</code>通过<code>await</code>直接返回一个结果集列表，我们可以清晰的从执行结果看出来，虽然任务2是先完成的，但最后返回的结果集的顺序是按照初始传入的任务顺序排的。</p><h3 id="③、asyncio-as-completed"><a href="#③、asyncio-as-completed" class="headerlink" title="③、asyncio.as_completed()"></a>③、asyncio.as_completed()</h3><p><strong><code>as_completed(tasks)</code>是一个生成器，它管理着一个协程列表(此处是传入的<code>tasks</code>)的运行。当任务集合中的某个任务率先执行完毕时，会率先通过await关键字返回该任务结果。可见其返回结果的顺序和<code>wait()</code>一样，均是按照完成任务顺序排列的。</strong></p><ul><li>例如：</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> time<span class="token keyword">import</span> asyncio<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">taskIO_1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'开始运行IO任务1...'</span><span class="token punctuation">)</span>    <span class="token keyword">await</span> asyncio<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>  <span class="token comment"># 假设该任务耗时3s</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'IO任务1已完成，耗时3s'</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> taskIO_1<span class="token punctuation">.</span>__name__<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">taskIO_2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'开始运行IO任务2...'</span><span class="token punctuation">)</span>    <span class="token keyword">await</span> asyncio<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>  <span class="token comment"># 假设该任务耗时2s</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'IO任务2已完成，耗时2s'</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> taskIO_2<span class="token punctuation">.</span>__name__<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment"># 调用方</span>    tasks <span class="token operator">=</span> <span class="token punctuation">[</span>taskIO_1<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> taskIO_2<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span>  <span class="token comment"># 把所有任务添加到task中</span>    <span class="token keyword">for</span> completed_task <span class="token keyword">in</span> asyncio<span class="token punctuation">.</span>as_completed<span class="token punctuation">(</span>tasks<span class="token punctuation">)</span><span class="token punctuation">:</span>        resualt <span class="token operator">=</span> <span class="token keyword">await</span> completed_task <span class="token comment"># 子生成器</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'协程无序返回值：'</span><span class="token operator">+</span>resualt<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    start <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>    loop <span class="token operator">=</span> asyncio<span class="token punctuation">.</span>get_event_loop<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 创建一个事件循环对象loop</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        loop<span class="token punctuation">.</span>run_until_complete<span class="token punctuation">(</span>main<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># 完成事件循环，直到最后一个任务结束</span>    <span class="token keyword">finally</span><span class="token punctuation">:</span>        loop<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 结束事件循环</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'所有IO任务总耗时%.5f秒'</span> <span class="token operator">%</span> <span class="token builtin">float</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span>start<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>结果为：</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">开始运行IO任务<span class="token number">2.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>开始运行IO任务<span class="token number">1.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>IO任务<span class="token number">2</span>已完成，耗时2s协程无序返回值：taskIO_2IO任务<span class="token number">1</span>已完成，耗时3s协程无序返回值：taskIO_1所有IO任务总耗时<span class="token number">3.00300</span>秒<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>从上面的程序可以看出，使用<code>as_completed(tasks)</code>和<code>wait(tasks)</code>相同之处是返回结果的顺序是协程的完成顺序，这与<code>gather()</code>恰好相反。而不同之处是<code>as_completed(tasks)</code>可以实时返回当前完成的结果，而<code>wait(tasks)</code>需要等待所有协程结束后返回的done去获得结果。</p><h1 id="二、aiohttp"><a href="#二、aiohttp" class="headerlink" title="二、aiohttp"></a>二、aiohttp</h1><ul><li>官方文档：<a href="https://docs.aiohttp.org/en/stable/">https://docs.aiohttp.org/en/stable/</a></li></ul><hr><h2 id="1、多线程与异步的区别"><a href="#1、多线程与异步的区别" class="headerlink" title="1、多线程与异步的区别"></a>1、多线程与异步的区别</h2><p><img src="https://img-blog.csdnimg.cn/56ccf3bb24ee41399f5a247ab12f2719.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6L-c5pa555qE5pif,size_20,color_FFFFFF,t_70,g_se,x_16"><br>异步爬虫不同于多进程爬虫，它使用单线程(即仅创建一个事件循环，然后把所有任务添加到事件循环中)就能并发处理多任务。在轮询到某个任务后，当遇到耗时操作(如请求URL)时，挂起该任务并进行下一个任务，当之前被挂起的任务更新了状态(如获得了网页响应)，则被唤醒，程序继续从上次挂起的地方运行下去。极大的减少了中间不必要的等待时间。</p><hr><h2 id="2、aiohttp安装"><a href="#2、aiohttp安装" class="headerlink" title="2、aiohttp安装"></a>2、aiohttp安装</h2><ul><li>原因<br><code>aiohttp</code>库，用来实现异步网页请求等功能，相当于异步版的<code>requests</code>库</li><li>安装</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">pip3 install aiohttp<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h2 id="3、ClientSession"><a href="#3、ClientSession" class="headerlink" title="3、ClientSession"></a>3、ClientSession</h2><p>在协程中使用<code>ClientSession()</code>的<code>get()</code>或<code>request()</code>方法来请求网页。(其中<code>async with</code>是<strong>异步上下文管理器</strong>，其封装了异步实现等功能)</p><ul><li>例如：</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> aiohttp<span class="token keyword">import</span> asyncio<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">get_text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">async</span> <span class="token keyword">with</span> aiohttp<span class="token punctuation">.</span>ClientSession<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> session<span class="token punctuation">:</span>        <span class="token keyword">async</span> <span class="token keyword">with</span> session<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'http://httpbin.org/get'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> resp<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>resp<span class="token punctuation">.</span>status<span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token keyword">await</span> resp<span class="token punctuation">.</span>text<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    loop <span class="token operator">=</span> asyncio<span class="token punctuation">.</span>get_event_loop<span class="token punctuation">(</span><span class="token punctuation">)</span>    task <span class="token operator">=</span> get_text<span class="token punctuation">(</span><span class="token punctuation">)</span>    loop<span class="token punctuation">.</span>run_until_complete<span class="token punctuation">(</span>task<span class="token punctuation">)</span>    loop<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>     main<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>输出结果为：</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token number">200</span><span class="token punctuation">{</span>  <span class="token string">"args"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>   <span class="token string">"headers"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token string">"Accept"</span><span class="token punctuation">:</span> <span class="token string">"*/*"</span><span class="token punctuation">,</span>     <span class="token string">"Accept-Encoding"</span><span class="token punctuation">:</span> <span class="token string">"gzip, deflate"</span><span class="token punctuation">,</span>     <span class="token string">"Host"</span><span class="token punctuation">:</span> <span class="token string">"httpbin.org"</span><span class="token punctuation">,</span>     <span class="token string">"User-Agent"</span><span class="token punctuation">:</span> <span class="token string">"Python/3.8 aiohttp/3.8.1"</span><span class="token punctuation">,</span>     <span class="token string">"X-Amzn-Trace-Id"</span><span class="token punctuation">:</span> <span class="token string">"Root=1-6216f458-66a3ef0733ff064f527672f8"</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>   <span class="token string">"origin"</span><span class="token punctuation">:</span> <span class="token string">"36.153.167.77"</span><span class="token punctuation">,</span>   <span class="token string">"url"</span><span class="token punctuation">:</span> <span class="token string">"http://httpbin.org/get"</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>还可以这样使用：</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">session<span class="token punctuation">.</span>request<span class="token punctuation">(</span>method<span class="token operator">=</span><span class="token string">'GET'</span><span class="token punctuation">,</span> url<span class="token operator">=</span><span class="token string">'http://httpbin.org/request'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="三、参考文章"><a href="#三、参考文章" class="headerlink" title="三、参考文章"></a>三、参考文章</h1><p><a href="https://cuiqingcai.com/6160.html">Python 中异步协程的使用方法介绍</a></p><p><a href="https://blog.csdn.net/SL_World/article/details/86691747">Python异步IO之协程(二):使用asyncio的不同方法实现协程</a></p><p><a href="https://blog.csdn.net/SL_World/article/details/86633611">Python实战异步爬虫(协程)+分布式爬虫(多进程)</a></p>]]></content>
      
      
      <categories>
          
          <category> 爬虫 </category>
          
          <category> asyncio </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
            <tag> asyncio </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
