<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>【selenium】设置元素等待</title>
      <link href="/2022/02/27/selenium-she-zhi-yuan-su-deng-dai/"/>
      <url>/2022/02/27/selenium-she-zhi-yuan-su-deng-dai/</url>
      
        <content type="html"><![CDATA[<h2 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h2><p><strong>selenium中有三种时间等待：</strong></p><ul><li>强制等待：<code>sleep</code></li><li>隐式等待：<code>implicitly_wait</code></li><li>显示等待：<code>WebDriverWait</code></li></ul><p><strong>其中，这三种方法各有优缺点：</strong><br>| 元素等待方式 | 优点 | 缺点|<br>|–|–|–|<br>| sleep | 使用起来最简单，可以选择在程序调试时使用 | 浪费很多的时间，影响效率 |<br>| implicitly_wait | 一旦设置，在WebDriver对象实例整个周期都起到作用 | 不够灵活 |<br>| WebDriverWait | 节省等待时间，执行效率高 | 使用起来，难度较上两个比较高 |</p><h2 id="二、强制等待"><a href="#二、强制等待" class="headerlink" title="二、强制等待"></a>二、强制等待</h2><p>让程序暂停运行一定的时间，等待时间达到要求的时间后继续运行。</p><p>使用前，需要先导入time模块：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> time<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>在前面的文章中，已经多次使用过，这里就不做演示了。</strong></p><p>需要注意的是，对于定位不到元素的时候，从耗时方面来讲，<code>隐式等待</code>和<code>强制等待</code>没什么区别。</p><h2 id="三、隐式等待"><a href="#三、隐式等待" class="headerlink" title="三、隐式等待"></a>三、隐式等待</h2><p><code>implicitly_wait()</code>默认参数的单位为秒，默认值为0。</p><p>如果在最大超时时间内找到元素了，会开始执行下一操作，未找到元素，则会抛出<code>NoSuchElementException</code> 异常。</p><p><strong>以百度为例：</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriver<span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver<span class="token punctuation">.</span>common<span class="token punctuation">.</span>by <span class="token keyword">import</span> By<span class="token keyword">import</span> timedriver <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Chrome<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 访问百度</span>driver<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'https://baidu.com'</span><span class="token punctuation">)</span>start <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 设置最大等待时间为3秒</span>driver<span class="token punctuation">.</span>implicitly_wait<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token keyword">try</span><span class="token punctuation">:</span>    <span class="token comment"># 使用id定位一个不存在的元素</span>    driver<span class="token punctuation">.</span>find_element<span class="token punctuation">(</span>By<span class="token punctuation">.</span>ID<span class="token punctuation">,</span> <span class="token string">'yyds'</span><span class="token punctuation">)</span><span class="token keyword">except</span> Exception <span class="token keyword">as</span> exception<span class="token punctuation">:</span>    <span class="token comment"># 打印异常</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>exception<span class="token punctuation">)</span>    <span class="token comment"># 打印程序运行时间</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'耗时：</span><span class="token interpolation"><span class="token punctuation">{</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span>start<span class="token punctuation">}</span></span><span class="token string">'</span></span><span class="token punctuation">)</span><span class="token comment"># 关闭所有页面</span>driver<span class="token punctuation">.</span>quit<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/099eb95220b1434aa665cda2a8ea1103.gif#pic_center"></p><h2 id="四、显示等待"><a href="#四、显示等待" class="headerlink" title="四、显示等待"></a>四、显示等待</h2><p><strong>需要导入模块：</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver<span class="token punctuation">.</span>support<span class="token punctuation">.</span>ui <span class="token keyword">import</span> WebDriverWait<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>WebDriverWait(driver, timeout, poll_frequency=0.5, ignored_exceptions=None)</p><ul><li><code>driver</code>: 传入WebDriver实例；</li><li><code>timeout</code>：指最大超时时间，默认单位为秒；</li><li><code>poll_frequency</code>：调用until或until_not方法，每隔一定时间不断尝试是否能找到页面元素，默认间隔是0.5s,可自行调整间隔时间。</li><li><code>ignored_exceptions</code>：超时后的异常信息，默认情况下NoSuchElementException 异常。</li></ul><p>WebDriverWait一般和<code>until()</code>和<code>until_not()</code>配合使用：</p><ul><li><code>until()</code> 当某元素出现 或 某条件成立则继续执行</li><li><code>until_not</code> 当某元素消失 或 某条件不成立则继续执</li></ul><p><code>until</code>或<code>until_not</code>中的<code>method参数</code>一定要是可以调用的对象，我们可以用selenium提供的<code>expected_conditions</code>，提供一些场景的判断。</p><p>但使用<code>expected_conditions</code>，需先导入：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver<span class="token punctuation">.</span>support <span class="token keyword">import</span> expected_conditions <span class="token keyword">as</span> EC<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>常用的<code>expected_conditions</code>方法如下：</strong></p><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>title_is</td><td>判断当前页面的 title 是否完全等于（==）预期字符串</td></tr><tr><td>title_contains</td><td>判断当前页面的 title 是否包含预期字符串</td></tr><tr><td>presence_of_element_located</td><td>判断某个元素是否被加到了 dom 树里，并不代表该元素一定可见</td></tr><tr><td>visibility_of_element_located</td><td>判断元素是否可见（可见代表元素非隐藏，并且元素宽和高都不等于 0）</td></tr><tr><td>visibility_of</td><td>作用和上一个方法类似，但传入参数是定位的元素，即element</td></tr><tr><td>presence_of_all_elements_located</td><td>判断是否至少有 1 个元素存在于 dom 树中。举例：如果页面上有 n 个元素的 class 都是’qw’，那么只要有 1 个元素存在，这个方法就返回 True</td></tr><tr><td>text_to_be_present_in_element</td><td>判断某个元素中的 text 是否包含了预期的字符串</td></tr><tr><td>text_to_be_present_in_element_value</td><td>判断某个元素中的 value 属性是否包含了预期的字符串</td></tr><tr><td>frame_to_be_available_and_switch_to_it</td><td>判断该 frame 是否可以 switch进去，如果可以的话，返回 True 并且 switch 进去，否则返回 False</td></tr><tr><td>invisibility_of_element_located</td><td>判断某个元素中是否不存在于dom树或不可见</td></tr><tr><td>element_to_be_clickable</td><td>判断某个元素中是否可见并且可点击</td></tr><tr><td>staleness_of</td><td>等某个元素从 dom 树中移除，注意，这个方法也是返回 True或 False</td></tr><tr><td>element_to_be_selected</td><td>判断某个元素是否被选中了,一般用在下拉列表</td></tr><tr><td>element_selection_state_to_be</td><td>判断某个元素的选中状态是否符合预期</td></tr><tr><td>element_located_selection_state_to_be</td><td>跟上面的方法作用一样，只是上面的方法传入定位到的 element，而这个方法传入 locator</td></tr><tr><td>alert_is_present</td><td>判断页面上是否存在 alert</td></tr></tbody></table><p><strong>以百度为例：</strong></p><ul><li>定位一个存在的元素：</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriver<span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver<span class="token punctuation">.</span>support<span class="token punctuation">.</span>ui <span class="token keyword">import</span> WebDriverWait<span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver<span class="token punctuation">.</span>support <span class="token keyword">import</span> expected_conditions <span class="token keyword">as</span> ECdriver <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Chrome<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 访问百度</span>driver<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'https://www.baidu.com'</span><span class="token punctuation">)</span><span class="token comment"># 设置显式等待，超时时长最大为5s，每隔1s查找元素一次</span><span class="token comment"># 根据id定位到元素位置</span>element <span class="token operator">=</span> WebDriverWait<span class="token punctuation">(</span>driver<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>until<span class="token punctuation">(</span>    EC<span class="token punctuation">.</span>presence_of_element_located<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">'id'</span><span class="token punctuation">,</span> <span class="token string">'kw'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 在定位到的地方，输入CSDN</span>element<span class="token punctuation">.</span>send_keys<span class="token punctuation">(</span><span class="token string">'CSDN'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/d0e0cce747884a0f97ad6ea38c58ee46.gif#pic_center"></p><ul><li>定位一个不存在的元素</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriver<span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver<span class="token punctuation">.</span>common<span class="token punctuation">.</span>by <span class="token keyword">import</span> By<span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver<span class="token punctuation">.</span>support<span class="token punctuation">.</span>ui <span class="token keyword">import</span> WebDriverWait<span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver<span class="token punctuation">.</span>support <span class="token keyword">import</span> expected_conditions <span class="token keyword">as</span> ECdriver <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Chrome<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 访问百度</span>driver<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'https://www.baidu.com'</span><span class="token punctuation">)</span><span class="token comment"># 设置显式等待，超时时长最大为5s，每隔1s查找元素一次</span><span class="token comment"># 根据id定位到元素位置</span>element <span class="token operator">=</span> WebDriverWait<span class="token punctuation">(</span>driver<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>until<span class="token punctuation">(</span>    EC<span class="token punctuation">.</span>presence_of_element_located<span class="token punctuation">(</span><span class="token punctuation">(</span>By<span class="token punctuation">.</span>ID<span class="token punctuation">,</span> <span class="token string">'csdn'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> message<span class="token operator">=</span><span class="token string">'超时了哟。。。'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>得到提示：</strong></p><blockquote><p>selenium.common.exceptions.TimeoutException: Message: 超时了哟。。。</p></blockquote><h2 id="五、参考文章"><a href="#五、参考文章" class="headerlink" title="五、参考文章"></a>五、参考文章</h2><p><a href="https://cloud.tencent.com/developer/article/1539124">Selenium自动化测试-设置元素等待</a></p>]]></content>
      
      
      <categories>
          
          <category> selenium </category>
          
      </categories>
      
      
        <tags>
            
            <tag> selenium </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【selenium】鼠标控制和键盘控制</title>
      <link href="/2022/02/27/selenium-shu-biao-kong-zhi-he-jian-pan-kong-zhi/"/>
      <url>/2022/02/27/selenium-shu-biao-kong-zhi-he-jian-pan-kong-zhi/</url>
      
        <content type="html"><![CDATA[<h2 id="一、鼠标控制"><a href="#一、鼠标控制" class="headerlink" title="一、鼠标控制"></a>一、鼠标控制</h2><p><strong>需要先导入：</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver<span class="token punctuation">.</span>common<span class="token punctuation">.</span>action_chains <span class="token keyword">import</span> ActionChains<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>常见操作：</strong><br>| 操作 | 作用 |<br>|–|–|<br>| click() | 单击左键 |<br>| double_click | 双击左键 |<br>| context_click() | 右键 |<br>| move_to_element() | 悬停 |<br>| drag_and_drop() | 拖动 |<br>| perform() | 执行所有存储在ActionChains中的动作 |<br><strong>其中：</strong></p><ul><li>左键不通过ActionChains也可以实现。</li><li>拖动需要两个必要参数<ul><li> source：拖动的元素</li><li>target：目标，鼠标需要拖动到的元素</li></ul></li></ul><p><strong>以百度为例：</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriver<span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver<span class="token punctuation">.</span>common<span class="token punctuation">.</span>by <span class="token keyword">import</span> By<span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver<span class="token punctuation">.</span>common<span class="token punctuation">.</span>action_chains <span class="token keyword">import</span> ActionChains<span class="token keyword">import</span> timedriver <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Chrome<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 访问百度</span>driver<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'https://baidu.com'</span><span class="token punctuation">)</span><span class="token comment"># 等待3秒</span>time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token comment"># 定位到 更多  按钮</span>button_1 <span class="token operator">=</span> driver<span class="token punctuation">.</span>find_element<span class="token punctuation">(</span>By<span class="token punctuation">.</span>XPATH<span class="token punctuation">,</span> <span class="token string">'//*[@id="s-top-left"]/div/a'</span><span class="token punctuation">)</span><span class="token comment"># 在  更多  按钮处悬停</span>ActionChains<span class="token punctuation">(</span>driver<span class="token punctuation">)</span><span class="token punctuation">.</span>move_to_element<span class="token punctuation">(</span>button_1<span class="token punctuation">)</span><span class="token punctuation">.</span>perform<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 等待3秒</span>time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token comment"># 定位到搜索框</span>text_label <span class="token operator">=</span> driver<span class="token punctuation">.</span>find_element<span class="token punctuation">(</span>By<span class="token punctuation">.</span>XPATH<span class="token punctuation">,</span> <span class="token string">'//*[@id="kw"]'</span><span class="token punctuation">)</span><span class="token comment"># 在搜索框中输入   CSDN</span>text_label<span class="token punctuation">.</span>send_keys<span class="token punctuation">(</span><span class="token string">'CSDN'</span><span class="token punctuation">)</span><span class="token comment"># 等待3秒</span>time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token comment"># 定位到  百度一下  按钮</span>button_2 <span class="token operator">=</span> driver<span class="token punctuation">.</span>find_element<span class="token punctuation">(</span>By<span class="token punctuation">.</span>XPATH<span class="token punctuation">,</span> <span class="token string">'//*[@id="su"]'</span><span class="token punctuation">)</span><span class="token comment"># 单击按钮</span>button_2<span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 等待3秒</span>time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token comment"># 关闭所有页面</span>driver<span class="token punctuation">.</span>quit<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/c31be9fdba3143a9b34a8a85cb45c790.gif#pic_center"></p><h2 id="二、键盘控制"><a href="#二、键盘控制" class="headerlink" title="二、键盘控制"></a>二、键盘控制</h2><p><strong>需要先导入：</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver<span class="token punctuation">.</span>common<span class="token punctuation">.</span>keys <span class="token keyword">import</span> Keys<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>常见操作：</strong><br>| 操作 | 作用 |<br>|–|–|<br>| Keys.ENTER | 回车键 |<br>| Keys.BACK_SPACE | backspace键 |<br>| Keys.CONTROL  | crntrol键 |<br>| Keys.F1 | F1键 |<br>| Keys.TAB | tab键 |<br>| Keys.ESCAPE | esc键 |<br>| Keys.ALT  | alt键 |<br>| Keys.SHIFT | shift键 |<br>| Keys.SPACE | 空格 |<br>| Keys.ARROW_UP | 向上的箭头 |<br>|  Keys.ARROW_DOWN | 向下的箭头 |<br>| Keys.ARROW_LEFT | 向左的箭头 |<br>|Keys.ARROW_ RIGHT | 向右的箭头 |</p><p><strong>常见组合操作：</strong><br>| 操作 | 作用 |<br>|–|–|<br>| (Keys.CONTROL, ‘a’) | 全选 |<br>| (Keys.CONTROL, ‘c’) | 复制 |<br>| (Keys.CONTROL, ‘v’) | 粘贴 |</p><p><strong>以百度为例：</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriver<span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver<span class="token punctuation">.</span>common<span class="token punctuation">.</span>by <span class="token keyword">import</span> By<span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver<span class="token punctuation">.</span>common<span class="token punctuation">.</span>keys <span class="token keyword">import</span> Keys<span class="token keyword">import</span> timedriver <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Chrome<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 访问百度</span>driver<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'https://baidu.com'</span><span class="token punctuation">)</span><span class="token comment"># 等待3秒</span>time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token comment"># 定位到搜索框</span>text_label <span class="token operator">=</span> driver<span class="token punctuation">.</span>find_element<span class="token punctuation">(</span>By<span class="token punctuation">.</span>XPATH<span class="token punctuation">,</span> <span class="token string">'//*[@id="kw"]'</span><span class="token punctuation">)</span><span class="token comment"># 在搜索框中输入   CSDN</span>text_label<span class="token punctuation">.</span>send_keys<span class="token punctuation">(</span><span class="token string">'CSDN'</span><span class="token punctuation">)</span><span class="token comment"># 使用“Ctrl+A”对输入内容进行全选</span>text_label<span class="token punctuation">.</span>send_keys<span class="token punctuation">(</span>Keys<span class="token punctuation">.</span>CONTROL<span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">)</span><span class="token comment"># 使用“Ctrl+C”对输入内容进行复制</span>text_label<span class="token punctuation">.</span>send_keys<span class="token punctuation">(</span>Keys<span class="token punctuation">.</span>CONTROL<span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">)</span><span class="token comment"># 等待3秒</span>time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token comment"># 使用backspace删掉选中内容</span>text_label<span class="token punctuation">.</span>send_keys<span class="token punctuation">(</span>Keys<span class="token punctuation">.</span>BACK_SPACE<span class="token punctuation">)</span><span class="token comment"># 等待3秒</span>time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token comment"># 使用“Ctrl+C”对输入内容进行粘贴</span>text_label<span class="token punctuation">.</span>send_keys<span class="token punctuation">(</span>Keys<span class="token punctuation">.</span>CONTROL<span class="token punctuation">,</span> <span class="token string">'v'</span><span class="token punctuation">)</span><span class="token comment"># 等待3秒</span>time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token comment"># 关闭所有页面</span>driver<span class="token punctuation">.</span>quit<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/f5047451b6264d4ab07c1ff0dde67a0d.gif#pic_center"></p>]]></content>
      
      
      <categories>
          
          <category> selenium </category>
          
      </categories>
      
      
        <tags>
            
            <tag> selenium </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【selenium】定位页面元素</title>
      <link href="/2022/02/27/selenium-ding-wei-ye-mian-yuan-su/"/>
      <url>/2022/02/27/selenium-ding-wei-ye-mian-yuan-su/</url>
      
        <content type="html"><![CDATA[<h2 id="一、已被废弃的用法"><a href="#一、已被废弃的用法" class="headerlink" title="一、已被废弃的用法"></a>一、已被废弃的用法</h2><h3 id="1、根据id定位"><a href="#1、根据id定位" class="headerlink" title="1、根据id定位"></a>1、根据id定位</h3><ul><li>定义一个元素</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">find_element_by_id<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>定义多个元素</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">find_elements_by_id<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2、根据class定位"><a href="#2、根据class定位" class="headerlink" title="2、根据class定位"></a>2、根据class定位</h3><ul><li>定义一个元素</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">find_element_by_class_name<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>定义多个元素</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">find_elements_by_class_name<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3、根据name定位"><a href="#3、根据name定位" class="headerlink" title="3、根据name定位"></a>3、根据name定位</h3><ul><li>定义一个元素</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">find_element_by_name<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>定义多个元素</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">find_elements_by_name<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="4、根据tag定位"><a href="#4、根据tag定位" class="headerlink" title="4、根据tag定位"></a>4、根据tag定位</h3><ul><li>定义一个元素</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">find_element_by_tag_name<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>定义多个元素</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">find_elements_by_tag_name<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="5、根据xpath定位"><a href="#5、根据xpath定位" class="headerlink" title="5、根据xpath定位"></a>5、根据xpath定位</h3><ul><li>定义一个元素</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">find_element<span class="token punctuation">(</span>By<span class="token punctuation">.</span>XPATH<span class="token punctuation">,</span> <span class="token string">' '</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>定义多个元素</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">find_elements_by_xpath<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="6、根据css定位"><a href="#6、根据css定位" class="headerlink" title="6、根据css定位"></a>6、根据css定位</h3><hr><ul><li><strong>CSS选择器参考手册链接：</strong></li></ul><p><a href="https://www.w3school.com.cn/cssref/css_selectors.asp">https://www.w3school.com.cn/cssref/css_selectors.asp</a></p><hr><ul><li>定义一个元素</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">find_element_by_css_selector<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>定义多个元素</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">find_elements_by_css_selector<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="7、根据link定位"><a href="#7、根据link定位" class="headerlink" title="7、根据link定位"></a>7、根据link定位</h3><p><strong>定义文本链接</strong></p><ul><li>定义一个元素</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">find_element_by_link_text<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>定义多个元素</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">find_elements_by_link_text<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="8、根据partial-link定位"><a href="#8、根据partial-link定位" class="headerlink" title="8、根据partial_link定位"></a>8、根据partial_link定位</h3><p><strong>定义部分文本链接</strong></p><ul><li>定义一个元素</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">find_element_by_partial_link_text<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>定义多个元素</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">find_elements_by_partial_link_text<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="二、现在的写法"><a href="#二、现在的写法" class="headerlink" title="二、现在的写法"></a>二、现在的写法</h2><p><strong>需要先导入：</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver<span class="token punctuation">.</span>common<span class="token punctuation">.</span>by <span class="token keyword">import</span> By<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>将之前的 <code>find_element_by_*</code> 命令改用 <code>find_element()</code>命令</p><p>如：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">text_label <span class="token operator">=</span> driver<span class="token punctuation">.</span>find_element_by_xpath<span class="token punctuation">(</span><span class="token string">'//*[@id="kw"]'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>改为：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">text_label <span class="token operator">=</span> driver<span class="token punctuation">.</span>find_element<span class="token punctuation">(</span>By<span class="token punctuation">.</span>XPATH<span class="token punctuation">,</span> <span class="token string">'//*[@id="kw"]'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="三、实例"><a href="#三、实例" class="headerlink" title="三、实例"></a>三、实例</h2><p>结合上一节，进行实例演示，以百度为例：</p><p> 首先，先手动查看一下搜索框信息和搜索按钮<br> <img src="https://img-blog.csdnimg.cn/76d83215e25e432b9efa979f014e36a1.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6L-c5pa555qE5pif,size_20,color_FFFFFF,t_70,g_se,x_16"><br><img src="https://img-blog.csdnimg.cn/3d4e0e7f981f424a9dd4fe3e233a5af7.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6L-c5pa555qE5pif,size_20,color_FFFFFF,t_70,g_se,x_16"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriver<span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver<span class="token punctuation">.</span>common<span class="token punctuation">.</span>by <span class="token keyword">import</span> By<span class="token keyword">import</span> timedriver <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Chrome<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 访问百度</span>driver<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'https://baidu.com'</span><span class="token punctuation">)</span><span class="token comment"># 等待3秒</span>time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token comment"># 定位到搜索框</span>text_label <span class="token operator">=</span> driver<span class="token punctuation">.</span>find_element<span class="token punctuation">(</span>By<span class="token punctuation">.</span>XPATH<span class="token punctuation">,</span> <span class="token string">'//*[@id="kw"]'</span><span class="token punctuation">)</span><span class="token comment"># 在搜索框中输入   CSDN</span>text_label<span class="token punctuation">.</span>send_keys<span class="token punctuation">(</span><span class="token string">'CSDN'</span><span class="token punctuation">)</span><span class="token comment"># 等待3秒</span>time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token comment"># 清楚搜索框内容</span>text_label<span class="token punctuation">.</span>clear<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 等待3秒</span>time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token comment"># 定位到“百度一下”按钮</span>button <span class="token operator">=</span> driver<span class="token punctuation">.</span>find_element<span class="token punctuation">(</span>By<span class="token punctuation">.</span>XPATH<span class="token punctuation">,</span> <span class="token string">'//*[@id="su"]'</span><span class="token punctuation">)</span><span class="token comment"># 输出按钮元素是否可见</span><span class="token keyword">print</span><span class="token punctuation">(</span>button<span class="token punctuation">.</span>is_displayed<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 输出按钮的大小</span><span class="token keyword">print</span><span class="token punctuation">(</span>button<span class="token punctuation">.</span>size<span class="token punctuation">)</span><span class="token comment"># 关闭所有页面</span>driver<span class="token punctuation">.</span>quit<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/1ea9fd621bac41709ac0826d87d7fcde.gif#pic_center"></p>]]></content>
      
      
      <categories>
          
          <category> selenium </category>
          
      </categories>
      
      
        <tags>
            
            <tag> selenium </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【selenium】浏览器控制方法</title>
      <link href="/2022/02/27/selenium-liu-lan-qi-kong-zhi-fang-fa/"/>
      <url>/2022/02/27/selenium-liu-lan-qi-kong-zhi-fang-fa/</url>
      
        <content type="html"><![CDATA[<h2 id="一、修改浏览器窗口的大小"><a href="#一、修改浏览器窗口的大小" class="headerlink" title="一、修改浏览器窗口的大小"></a>一、修改浏览器窗口的大小</h2><ul><li><code>set_window_size()</code>可修改浏览器窗口的大小。</li><li><code>maximize_window()</code>方法可以将浏览器<code>最大化</code>。<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriver<span class="token keyword">import</span> timedriver <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Chrome<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 访问百度</span>driver<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'https://baidu.com'</span><span class="token punctuation">)</span><span class="token comment"># 等待3秒</span>time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token comment"># 设置浏览器的宽高分别为：400x600</span>driver<span class="token punctuation">.</span>set_window_size<span class="token punctuation">(</span><span class="token number">400</span><span class="token punctuation">,</span> <span class="token number">600</span><span class="token punctuation">)</span><span class="token comment"># 等待3秒</span>time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token comment"># 设置浏览器为全屏</span>driver<span class="token punctuation">.</span>maximize_window<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 等待3秒</span>time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token comment"># 关闭所有页面</span>driver<span class="token punctuation">.</span>quit<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="二、浏览器的刷新、后退、前进"><a href="#二、浏览器的刷新、后退、前进" class="headerlink" title="二、浏览器的刷新、后退、前进"></a>二、浏览器的刷新、后退、前进</h2></li><li><code>refresh()</code> 方法可以实现页面<code>刷新</code>。</li><li><code>back()</code>方法可以实现页面的<code>后退</code>。</li><li><code>forward()</code>方法可以实现页面的<code>前进</code>。</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriver<span class="token keyword">import</span> timedriver <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Chrome<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 访问百度</span>driver<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'https://baidu.com'</span><span class="token punctuation">)</span><span class="token comment"># 等待3秒</span>time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token comment"># 刷新页面</span>driver<span class="token punctuation">.</span>refresh<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 等待3秒</span>time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token comment"># 访问博主的CSDN个人主页</span>driver<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'https://blog.csdn.net/qq_44921056'</span><span class="token punctuation">)</span><span class="token comment"># 等待3秒</span>time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token comment"># 页面后退</span>driver<span class="token punctuation">.</span>back<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 等待3秒</span>time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token comment"># 页面前进</span>driver<span class="token punctuation">.</span>forward<span class="token punctuation">(</span><span class="token punctuation">)</span>time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token comment"># 关闭所有页面</span>driver<span class="token punctuation">.</span>quit<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="三、浏览器窗口切换"><a href="#三、浏览器窗口切换" class="headerlink" title="三、浏览器窗口切换"></a>三、浏览器窗口切换</h2><ul><li>打开多个窗口，需要定位到新打开的窗口</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 获取打开的多个窗口句柄</span>windows <span class="token operator">=</span> driver<span class="token punctuation">.</span>window_handles<span class="token comment"># 切换到当前最新打开的窗口</span>driver<span class="token punctuation">.</span>switch_to<span class="token punctuation">.</span>window<span class="token punctuation">(</span>windows<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>打开两个窗口，需要定位到新的窗口</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 获得打开的第一个窗口句柄</span>window_1 <span class="token operator">=</span> driver<span class="token punctuation">.</span>current_window_handle<span class="token comment"># 获得打开的所有的窗口句柄</span>windows <span class="token operator">=</span> driver<span class="token punctuation">.</span>window_handles<span class="token comment"># 切换到最新的窗口</span><span class="token keyword">for</span> current_window <span class="token keyword">in</span> windows<span class="token punctuation">:</span> <span class="token keyword">if</span> current_window <span class="token operator">!=</span> window_1<span class="token punctuation">:</span>  driver<span class="token punctuation">.</span>switch_to<span class="token punctuation">.</span>window<span class="token punctuation">(</span>current_window<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="四、其它操作"><a href="#四、其它操作" class="headerlink" title="四、其它操作"></a>四、其它操作</h2><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>send_keys()</td><td>模拟按键输入</td></tr><tr><td>clear()</td><td>清除文本内容</td></tr><tr><td>size</td><td>获取元素尺寸</td></tr><tr><td>text</td><td>获取元素的文本</td></tr><tr><td>get_attribute()</td><td>获取元素属性值</td></tr><tr><td>is_displayed()</td><td>设置该元素用户是否可见</td></tr><tr><td><strong>这部分实例要结合下一节内容，下一节进行演示。</strong></td><td></td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> selenium </category>
          
      </categories>
      
      
        <tags>
            
            <tag> selenium </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Chromedriver】下载、安装及配置</title>
      <link href="/2022/02/26/chromedriver-xia-zai-an-zhuang-ji-pei-zhi/"/>
      <url>/2022/02/26/chromedriver-xia-zai-an-zhuang-ji-pei-zhi/</url>
      
        <content type="html"><![CDATA[<h2 id="一、查看Chrome-版本"><a href="#一、查看Chrome-版本" class="headerlink" title="一、查看Chrome 版本"></a>一、查看Chrome 版本</h2><p><img src="https://img-blog.csdnimg.cn/45f7da59774e43688ee3eea6bd8909ed.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6L-c5pa555qE5pif,size_20,color_FFFFFF,t_70,g_se,x_16"><br><img src="https://img-blog.csdnimg.cn/ea946ef42f674a2b91fae8c2858cb66e.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6L-c5pa555qE5pif,size_20,color_FFFFFF,t_70,g_se,x_16"></p><h2 id="二、下载-ChromeDriver"><a href="#二、下载-ChromeDriver" class="headerlink" title="二、下载 ChromeDriver"></a>二、下载 ChromeDriver</h2><p>根据自己查到的版本到 ChromeDriver 镜像站下载对应的安装包，在不同平台下，可以下载不同的安装包。</p><p>镜像站链接如下：<br><a href="https://chromedriver.storage.googleapis.com/index.html">https://chromedriver.storage.googleapis.com/index.html</a></p><h2 id="三、安装selenium"><a href="#三、安装selenium" class="headerlink" title="三、安装selenium"></a>三、安装selenium</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pip <span class="token function">install</span> selenium<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="四、环境配置"><a href="#四、环境配置" class="headerlink" title="四、环境配置"></a>四、环境配置</h2><p>最<strong>简单粗暴</strong>的方法，将上述在镜像站下载的压缩包进行解压，将解压的<code>chromedriver.exe</code> 放到<code>Python</code> 的 <code>Scripts</code> 目录下。<br><img src="https://img-blog.csdnimg.cn/be2b5bc5cbf14587a8ab1e03376c2da5.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6L-c5pa555qE5pif,size_20,color_FFFFFF,t_70,g_se,x_16"></p><h2 id="五、验证安装"><a href="#五、验证安装" class="headerlink" title="五、验证安装"></a>五、验证安装</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriver<span class="token keyword">import</span> time<span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    driver <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Chrome<span class="token punctuation">(</span><span class="token punctuation">)</span>    driver<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'https://www.baidu.com'</span><span class="token punctuation">)</span>    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>    driver<span class="token punctuation">.</span>quit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    main<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行之后，能看到百度页面，代表安装成功。（<strong>页面会在5s后关闭</strong>）</p>]]></content>
      
      
      <categories>
          
          <category> selenium </category>
          
      </categories>
      
      
        <tags>
            
            <tag> selenium </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【python单线程、多线程、协程】爬虫案例比较</title>
      <link href="/2022/02/25/python-dan-xian-cheng-duo-xian-cheng-xie-cheng-pa-chong-an-li-bi-jiao/"/>
      <url>/2022/02/25/python-dan-xian-cheng-duo-xian-cheng-xie-cheng-pa-chong-an-li-bi-jiao/</url>
      
        <content type="html"><![CDATA[<h2 id="爬取任务"><a href="#爬取任务" class="headerlink" title="爬取任务"></a>爬取任务</h2><p><strong>彼岸图网：4k美女图片，2-10页图片对应的详情页链接</strong></p><ul><li>链接如下：<a href="https://pic.netbian.com/4kmeinv/index_2.html">4k美女图片</a><br><img src="https://img-blog.csdnimg.cn/3a8c8668c09e4378bdf27cbdf722c70f.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6L-c5pa555qE5pif,size_20,color_FFFFFF,t_70,g_se,x_16"></li><li><strong>单线程</strong></li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> fake_useragent <span class="token keyword">import</span> UserAgent<span class="token keyword">import</span> requests<span class="token keyword">from</span> pyquery <span class="token keyword">import</span> PyQuery <span class="token keyword">as</span> pq<span class="token keyword">import</span> timeua <span class="token operator">=</span> UserAgent<span class="token punctuation">(</span>verify_ssl<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> path<span class="token operator">=</span><span class="token string">'D:/Pycharm/fake_useragent.json'</span><span class="token punctuation">)</span>lists <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>start <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">ua_random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    headers <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">'use_agent'</span> <span class="token punctuation">:</span> ua<span class="token punctuation">.</span>random    <span class="token punctuation">}</span>    <span class="token keyword">return</span> headers<span class="token keyword">def</span> <span class="token function">scrap_page</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">:</span>    response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token punctuation">,</span> headers<span class="token operator">=</span>ua_random<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>text    doc <span class="token operator">=</span> pq<span class="token punctuation">(</span>response<span class="token punctuation">)</span>    <span class="token keyword">return</span> doc<span class="token keyword">def</span> <span class="token function">scrap_index</span><span class="token punctuation">(</span>page<span class="token punctuation">)</span><span class="token punctuation">:</span>    url <span class="token operator">=</span> <span class="token string-interpolation"><span class="token string">f'https://pic.netbian.com/4kmeinv/index_</span><span class="token interpolation"><span class="token punctuation">{</span>page<span class="token punctuation">}</span></span><span class="token string">.html'</span></span>    <span class="token keyword">return</span> scrap_page<span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">scrap_link</span><span class="token punctuation">(</span>html<span class="token punctuation">)</span><span class="token punctuation">:</span>    links <span class="token operator">=</span> html<span class="token punctuation">(</span><span class="token string">'.clearfix li a'</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> link <span class="token keyword">in</span> links<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        lists<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">'https://pic.netbian.com'</span><span class="token operator">+</span>link<span class="token punctuation">.</span>attr<span class="token punctuation">(</span><span class="token string">'href'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># total_page = 5</span>    <span class="token keyword">for</span> page <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        html <span class="token operator">=</span> scrap_index<span class="token punctuation">(</span>page<span class="token punctuation">)</span>        scrap_link<span class="token punctuation">(</span>html<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>lists<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'总用时：</span><span class="token interpolation"><span class="token punctuation">{</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span>start<span class="token punctuation">}</span></span><span class="token string">'</span></span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    main<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出结果：<br><img src="https://img-blog.csdnimg.cn/5df3744af78e4a0885aab9643308bbf3.gif#pic_center"><br><strong>总耗时：2.87秒</strong></p><ul><li><strong>多线程</strong></li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> fake_useragent <span class="token keyword">import</span> UserAgent<span class="token keyword">import</span> requests<span class="token keyword">from</span> pyquery <span class="token keyword">import</span> PyQuery <span class="token keyword">as</span> pq<span class="token keyword">import</span> time<span class="token keyword">from</span> concurrent<span class="token punctuation">.</span>futures <span class="token keyword">import</span> ThreadPoolExecutorua <span class="token operator">=</span> UserAgent<span class="token punctuation">(</span>verify_ssl<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> path<span class="token operator">=</span><span class="token string">'D:/Pycharm/fake_useragent.json'</span><span class="token punctuation">)</span>lists <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>start <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">ua_random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    headers <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">'use_agent'</span> <span class="token punctuation">:</span> ua<span class="token punctuation">.</span>random    <span class="token punctuation">}</span>    <span class="token keyword">return</span> headers<span class="token keyword">def</span> <span class="token function">scrap_page</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">:</span>    response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token punctuation">,</span> headers<span class="token operator">=</span>ua_random<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>text    doc <span class="token operator">=</span> pq<span class="token punctuation">(</span>response<span class="token punctuation">)</span>    <span class="token keyword">return</span> doc<span class="token keyword">def</span> <span class="token function">scrap_index</span><span class="token punctuation">(</span>page<span class="token punctuation">)</span><span class="token punctuation">:</span>    url <span class="token operator">=</span> <span class="token string-interpolation"><span class="token string">f'https://pic.netbian.com/4kmeinv/index_</span><span class="token interpolation"><span class="token punctuation">{</span>page<span class="token punctuation">}</span></span><span class="token string">.html'</span></span>    <span class="token keyword">return</span> scrap_page<span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">scrap_link</span><span class="token punctuation">(</span>html<span class="token punctuation">)</span><span class="token punctuation">:</span>    links <span class="token operator">=</span> html<span class="token punctuation">(</span><span class="token string">'.clearfix li a'</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> link <span class="token keyword">in</span> links<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        lists<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">'https://pic.netbian.com'</span><span class="token operator">+</span>link<span class="token punctuation">.</span>attr<span class="token punctuation">(</span><span class="token string">'href'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span>page<span class="token punctuation">)</span><span class="token punctuation">:</span>    html <span class="token operator">=</span> scrap_index<span class="token punctuation">(</span>page<span class="token punctuation">)</span>    scrap_link<span class="token punctuation">(</span>html<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>lists<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    page <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">with</span> ThreadPoolExecutor<span class="token punctuation">(</span>max_workers<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token keyword">as</span> executor<span class="token punctuation">:</span>        executor<span class="token punctuation">.</span><span class="token builtin">map</span><span class="token punctuation">(</span>main<span class="token punctuation">,</span> page<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'总用时：'</span><span class="token punctuation">,</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span>start<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/c2f1b18105854a76b0d1a7b64f763119.gif#pic_center"><br><strong>总耗时：0.86秒</strong></p><ul><li><strong>协程</strong></li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> aiohttp<span class="token keyword">import</span> asyncio<span class="token keyword">from</span> fake_useragent <span class="token keyword">import</span> UserAgent<span class="token keyword">from</span> pyquery <span class="token keyword">import</span> PyQuery <span class="token keyword">as</span> pq<span class="token keyword">import</span> timeua <span class="token operator">=</span> UserAgent<span class="token punctuation">(</span>verify_ssl<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> path<span class="token operator">=</span><span class="token string">'D:/Pycharm/fake_useragent.json'</span><span class="token punctuation">)</span>lists <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>start <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">ua_random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    headers <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">'use_agent'</span> <span class="token punctuation">:</span> ua<span class="token punctuation">.</span>random    <span class="token punctuation">}</span>    <span class="token keyword">return</span> headers<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">scrape_text</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">async</span> <span class="token keyword">with</span> aiohttp<span class="token punctuation">.</span>ClientSession<span class="token punctuation">(</span>headers<span class="token operator">=</span>ua_random<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">as</span> session<span class="token punctuation">:</span>        <span class="token keyword">async</span> <span class="token keyword">with</span> session<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span> <span class="token keyword">as</span> response<span class="token punctuation">:</span>            result <span class="token operator">=</span> <span class="token keyword">await</span> response<span class="token punctuation">.</span>text<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">await</span> session<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> result<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">scrap_url</span><span class="token punctuation">(</span>html<span class="token punctuation">)</span><span class="token punctuation">:</span>    doc <span class="token operator">=</span> pq<span class="token punctuation">(</span>html<span class="token punctuation">)</span>    links <span class="token operator">=</span> doc<span class="token punctuation">(</span><span class="token string">'.clearfix li a'</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> link <span class="token keyword">in</span> links<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        lists<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">'https://pic.netbian.com'</span> <span class="token operator">+</span> link<span class="token punctuation">.</span>attr<span class="token punctuation">(</span><span class="token string">'href'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">scrap_index</span><span class="token punctuation">(</span>page<span class="token punctuation">)</span><span class="token punctuation">:</span>    url <span class="token operator">=</span> <span class="token string-interpolation"><span class="token string">f'https://pic.netbian.com/4kmeinv/index_</span><span class="token interpolation"><span class="token punctuation">{</span>page<span class="token punctuation">}</span></span><span class="token string">.html'</span></span>    html <span class="token operator">=</span> <span class="token keyword">await</span> scrape_text<span class="token punctuation">(</span>url<span class="token punctuation">)</span>    <span class="token keyword">await</span> scrap_url<span class="token punctuation">(</span>html<span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    scrap_index_tasks <span class="token operator">=</span> <span class="token punctuation">[</span>asyncio<span class="token punctuation">.</span>ensure_future<span class="token punctuation">(</span>scrap_index<span class="token punctuation">(</span>page<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">for</span> page <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">]</span>    <span class="token keyword">await</span> asyncio<span class="token punctuation">.</span>gather<span class="token punctuation">(</span><span class="token operator">*</span>scrap_index_tasks<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>lists<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    loop <span class="token operator">=</span> asyncio<span class="token punctuation">.</span>get_event_loop<span class="token punctuation">(</span><span class="token punctuation">)</span>    loop<span class="token punctuation">.</span>run_until_complete<span class="token punctuation">(</span>main<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'总用时：'</span><span class="token punctuation">,</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span>start<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/dac1881e72574d03998621619c56bc62.gif#pic_center"><br><strong>总耗时：0.49秒</strong></p><h2 id="对比"><a href="#对比" class="headerlink" title="对比"></a>对比</h2><table><thead><tr><th>单线程</th><th>多线程</th><th>协程</th></tr></thead><tbody><tr><td>2.87秒</td><td>0.86秒</td><td>0.49秒</td></tr></tbody></table><p><strong>总结：</strong> 一般情况下异步爬虫速度最快，多线程爬虫略慢一点，单线程爬虫速度较慢，必须上一个页面爬取完成才能继续爬取。</p><blockquote><p>**多线程(multithreading)**：是指从软件或者硬件上实现多个线程并发执行的技术。具有多线程能力的计算机因有硬件支持而能够在同一时间执行多于一个线程，进而提升整体处理性能。具有这种能力的系统包括对称多处理机、多核心处理器以及芯片级多处理或同时多线程处理器。在一个程序中，这些独立运行的程序片段叫作 “线程” (Thread），利用它编程的概念就叫作 “多线程处理”。<br>**异步(asynchronous)**：为完成某个任务，不同程序单元之间过程中无需通信协调，也能完成任务的方式，不相关的程序单元之间可以是异步的。例如，爬虫下载网页。调度程序调用下载程序后，即可调度其他任务，而无需与该下载任务保持通信以协调行为。不同网页的下载、保存等操作都是无关的，也无需相互通知协调。这些异步操作的完成时刻并不确定。简言之，异步意味着无序。<br>**协程(coroutine)**，又称微线程、纤程，协程是一种用户态的轻量级线程。协程拥有自己的寄存器上下文和栈。协程调度切换时，将寄存器上下文和栈保存到其他地方，在切回来的时候，恢复先前保存的寄存器上下文和栈。因此协程能保留上一次调用时的状态，即所有局部状态的一个特定组合，每次过程重入时，就相当于进入上一次调用的状态。协程本质上是个单进程，协程相对于多进程来说，无需线程上下文切换的开销，无需原子操作锁定及同步的开销，编程模型也非常简单。我们可以使用协程来实现异步操作，比如在网络爬虫场景下，我们发出一个请求之后，需要等待一定的时间才能得到响应，但其实在这个等待过程中，程序可以干许多其他的事情，等到响应得到之后才切换回来继续处理，这样可以充分利用CPU 和其他资源，这就是协程的优势。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 爬虫 </category>
          
          <category> 多线程 </category>
          
          <category> 协程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
            <tag> 多线程 </tag>
            
            <tag> 协程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【异步爬虫】学习笔记</title>
      <link href="/2022/02/24/yi-bu-pa-chong-xue-xi-bi-ji/"/>
      <url>/2022/02/24/yi-bu-pa-chong-xue-xi-bi-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="一、asyncio"><a href="#一、asyncio" class="headerlink" title="一、asyncio"></a>一、asyncio</h1><ul><li><strong>event_loop</strong>：事件循环，相当于一个无限循环，我们可以把一些函数注册到这个事件循环上，当满足条件发生的时候，就会调用对应的处理方法。</li><li><strong>coroutine</strong>：中文翻译叫协程，在 Python 中常指代为协程对象类型，我们可以将协程对象注册到时间循环中，它会被事件循环调用。我们可以使用 - async 关键字来定义一个方法，这个方法在调用时不会立即被执行，而是返回一个协程对象。</li><li><strong>task</strong>：任务，它是对协程对象的进一步封装，包含了任务的各个状态。</li><li><strong>future</strong>：代表将来执行或没有执行的任务的结果，实际上和 task 没有本质区别。</li></ul><h2 id="1、定义协程"><a href="#1、定义协程" class="headerlink" title="1、定义协程"></a>1、定义协程</h2><p>第一个例子</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> asyncio<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">execute</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Number:'</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span>coroutine <span class="token operator">=</span> execute<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'After calling execute'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Coroutine:'</span><span class="token punctuation">,</span> coroutine<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'*'</span><span class="token operator">*</span><span class="token number">40</span><span class="token punctuation">,</span> <span class="token string">'分割线'</span><span class="token punctuation">,</span> <span class="token string">'*'</span><span class="token operator">*</span><span class="token number">40</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'After calling loop'</span><span class="token punctuation">)</span>loop <span class="token operator">=</span> asyncio<span class="token punctuation">.</span>get_event_loop<span class="token punctuation">(</span><span class="token punctuation">)</span>loop<span class="token punctuation">.</span>run_until_complete<span class="token punctuation">(</span>coroutine<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出结果为：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">After calling executeCoroutine<span class="token punctuation">:</span> <span class="token operator">&lt;</span>coroutine <span class="token builtin">object</span> execute at <span class="token number">0x000002836EB16C40</span><span class="token operator">&gt;</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span> 分割线 <span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span>After calling loopNumber<span class="token punctuation">:</span> <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>首先，引入<code>asyncio</code>这个包，这样菜鸟使用<code>async</code>和<code>await</code>；<br>然后，使用<code>async</code>定义一个<code>execute()</code>方法，这个方法的功能是，接收一个数字之后，打印出这个数字；<br>紧接着，尝试直接调用这个方法，但这个方法没有执行，而是返回了一个<code>coroutine协程对象</code>；<br>之后，使用<code>get_event_loop()方法</code>创建一个事件循环<code>loop</code>，并调用<code>loop对象</code>的<code>run_until_complete()方法</code>将协程注册到<code>loop</code>中，并启动；<br>这次之后，就可以看到<code>execute()</code>方法输出的结果。</p><p><strong>结论：</strong> <code>async</code>定义的方法会编程一个无法执行的<code>coroutine协程对象</code>，必须将其注册到事件循环中才能执行。</p><hr><p>一开始，还提到了<code>task</code>，相对于<code>coroutine对象</code>，它多了运行状态，我们可以根据这些状态来获取协程对象的执行情况。</p><p><strong>上个例子，当我们将<code>coroutine对象</code>传递给<code>run_until_complete()方法</code>的时候，实际上它进行了一个操作就是将<code>coroutine</code>封装成了<code>task对象</code></strong></p><ul><li>实操验证一下：</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> asyncio<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">execute</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Number:'</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span>coroutine <span class="token operator">=</span> execute<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'After calling execute'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Coroutine:'</span><span class="token punctuation">,</span> coroutine<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'*'</span><span class="token operator">*</span><span class="token number">40</span><span class="token punctuation">,</span> <span class="token string">'分割线'</span><span class="token punctuation">,</span> <span class="token string">'*'</span><span class="token operator">*</span><span class="token number">40</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'After calling loop'</span><span class="token punctuation">)</span>loop <span class="token operator">=</span> asyncio<span class="token punctuation">.</span>get_event_loop<span class="token punctuation">(</span><span class="token punctuation">)</span>task <span class="token operator">=</span> loop<span class="token punctuation">.</span>create_task<span class="token punctuation">(</span>coroutine<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'task:'</span><span class="token punctuation">,</span> task<span class="token punctuation">)</span>loop<span class="token punctuation">.</span>run_until_complete<span class="token punctuation">(</span>task<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'task:'</span><span class="token punctuation">,</span> task<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>输出结果：<pre class="line-numbers language-python" data-language="python"><code class="language-python">After calling executeCoroutine<span class="token punctuation">:</span> <span class="token operator">&lt;</span>coroutine <span class="token builtin">object</span> execute at <span class="token number">0x000001A58E626B40</span><span class="token operator">&gt;</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span> 分割线 <span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span>After calling looptask<span class="token punctuation">:</span> <span class="token operator">&lt;</span>Task pending name<span class="token operator">=</span><span class="token string">'Task-1'</span> coro<span class="token operator">=</span><span class="token operator">&lt;</span>execute<span class="token punctuation">(</span><span class="token punctuation">)</span> running at ‘这里是文件路径’<span class="token punctuation">:</span><span class="token number">10</span><span class="token operator">&gt;&gt;</span>Number<span class="token punctuation">:</span> <span class="token number">1</span>task<span class="token punctuation">:</span> <span class="token operator">&lt;</span>Task finished name<span class="token operator">=</span><span class="token string">'Task-1'</span> coro<span class="token operator">=</span><span class="token operator">&lt;</span>execute<span class="token punctuation">(</span><span class="token punctuation">)</span> done<span class="token punctuation">,</span> defined at ‘这里是文件路径’<span class="token punctuation">:</span><span class="token number">10</span><span class="token operator">&gt;</span> result<span class="token operator">=</span><span class="token boolean">None</span><span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>这里在定义<code>loop对象</code>之后，紧接着调用了它的<code>create_task()方法</code>将<code>coroutine对象</code>转化为了<code>task对象</code>，然后打印输出，发现它是<strong>pending</strong>状态；<br>然后，将<code>task对象</code>添加到事件循环中得到执行，紧接着再打印输出，发现它的状态变成了<strong>finished</strong>，与此同时，还可以发现result变成了1（也就是定义的<code>execute()方法</code>的返回结果）。</li></ul><hr><p>直接通过asyncio的ensure_future()方法，不需要借助loop来定义，也可以返回task对象。</p><ul><li>实操验证一下：</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> asyncio<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">execute</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Number:'</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span>coroutine <span class="token operator">=</span> execute<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'After calling execute'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Coroutine:'</span><span class="token punctuation">,</span> coroutine<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'*'</span><span class="token operator">*</span><span class="token number">40</span><span class="token punctuation">,</span> <span class="token string">'分割线'</span><span class="token punctuation">,</span> <span class="token string">'*'</span><span class="token operator">*</span><span class="token number">40</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'After calling loop'</span><span class="token punctuation">)</span>task <span class="token operator">=</span> asyncio<span class="token punctuation">.</span>ensure_future<span class="token punctuation">(</span>coroutine<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'task:'</span><span class="token punctuation">,</span> task<span class="token punctuation">)</span>loop <span class="token operator">=</span> asyncio<span class="token punctuation">.</span>get_event_loop<span class="token punctuation">(</span><span class="token punctuation">)</span>loop<span class="token punctuation">.</span>run_until_complete<span class="token punctuation">(</span>task<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'task:'</span><span class="token punctuation">,</span> task<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>输出结果：<pre class="line-numbers language-python" data-language="python"><code class="language-python">After calling executeCoroutine<span class="token punctuation">:</span> <span class="token operator">&lt;</span>coroutine <span class="token builtin">object</span> execute at <span class="token number">0x000001A58E626B40</span><span class="token operator">&gt;</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span> 分割线 <span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span><span class="token operator">**</span>After calling looptask<span class="token punctuation">:</span> <span class="token operator">&lt;</span>Task pending name<span class="token operator">=</span><span class="token string">'Task-1'</span> coro<span class="token operator">=</span><span class="token operator">&lt;</span>execute<span class="token punctuation">(</span><span class="token punctuation">)</span> running at ‘这里是文件路径’<span class="token punctuation">:</span><span class="token number">10</span><span class="token operator">&gt;&gt;</span>Number<span class="token punctuation">:</span> <span class="token number">1</span>task<span class="token punctuation">:</span> <span class="token operator">&lt;</span>Task finished name<span class="token operator">=</span><span class="token string">'Task-1'</span> coro<span class="token operator">=</span><span class="token operator">&lt;</span>execute<span class="token punctuation">(</span><span class="token punctuation">)</span> done<span class="token punctuation">,</span> defined at ‘这里是文件路径’<span class="token punctuation">:</span><span class="token number">10</span><span class="token operator">&gt;</span> result<span class="token operator">=</span><span class="token boolean">None</span><span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>和上例的结果是一样的<h2 id="2、asyncio的一些方法"><a href="#2、asyncio的一些方法" class="headerlink" title="2、asyncio的一些方法"></a>2、asyncio的一些方法</h2></li><li><strong>官方文档</strong>：<a href="https://docs.python.org/zh-cn/3/library/asyncio-task.html">协程与任务</a></li></ul><hr><h3 id="①、asyncio-wait"><a href="#①、asyncio-wait" class="headerlink" title="①、asyncio.wait()"></a>①、asyncio.wait()</h3><p><strong>可以将一个操作分成多个部分并分开执行，而wait(tasks)可以被用于中断任务集合(tasks)中的某个被事件循环轮询到的任务，直到该协程的其他后台操作完成才被唤醒。</strong></p><ul><li>例如：<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> time<span class="token keyword">import</span> asyncio<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">task_1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'开始运行IO任务1...'</span><span class="token punctuation">)</span>    <span class="token keyword">await</span> asyncio<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>  <span class="token comment"># 假设该任务耗时3s</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'IO任务1已完成，耗时3s'</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> task_1<span class="token punctuation">.</span>__name__<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">task_2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'开始运行IO任务2...'</span><span class="token punctuation">)</span>    <span class="token keyword">await</span> asyncio<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>  <span class="token comment"># 假设该任务耗时2s</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'IO任务2已完成，耗时2s'</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> task_2<span class="token punctuation">.</span>__name__<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 调用方</span>    tasks <span class="token operator">=</span> <span class="token punctuation">[</span>task_1<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> task_2<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span>  <span class="token comment"># 把所有任务添加到task中</span>    done<span class="token punctuation">,</span>pending <span class="token operator">=</span> <span class="token keyword">await</span> asyncio<span class="token punctuation">.</span>wait<span class="token punctuation">(</span>tasks<span class="token punctuation">)</span>  <span class="token comment"># 子生成器</span>    <span class="token keyword">for</span> r <span class="token keyword">in</span> done<span class="token punctuation">:</span>  <span class="token comment"># done和pending都是一个任务，所以返回结果需要逐个调用result()</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'协程无序返回值：'</span><span class="token operator">+</span>r<span class="token punctuation">.</span>result<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    start <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>    loop <span class="token operator">=</span> asyncio<span class="token punctuation">.</span>get_event_loop<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 创建一个事件循环对象loop</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        loop<span class="token punctuation">.</span>run_until_complete<span class="token punctuation">(</span>main<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># 完成事件循环，直到最后一个任务结束</span>    <span class="token keyword">finally</span><span class="token punctuation">:</span>        loop<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 结束事件循环</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'所有IO任务总耗时%.5f秒'</span> <span class="token operator">%</span> <span class="token builtin">float</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span>start<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>输出结果：</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">开始运行IO任务<span class="token number">1.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>开始运行IO任务<span class="token number">2.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>IO任务<span class="token number">2</span>已完成，耗时2sIO任务<span class="token number">1</span>已完成，耗时3s协程无序返回值：task_2协程无序返回值：task_1所有IO任务总耗时<span class="token number">3.00769</span>秒<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>其中：</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">done<span class="token punctuation">,</span> pending <span class="token operator">=</span> <span class="token keyword">await</span> asyncio<span class="token punctuation">.</span>wait<span class="token punctuation">(</span>aws<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>此处并发运行传入的<code>aws(awaitable objects)</code>，同时通过<code>await</code>返回一个包含(done, pending)的元组，<code>done</code>表示已完成的任务列表，<code>pending</code>表示未完成的任务列表。<br><strong>注：</strong><br>①只有当给<code>wait()</code>传入<code>timeout参数</code>时才有可能产生<code>pending</code>列表。<br>②通过<code>wait()</code>返回的结果集是按照事件循环中的任务完成顺序排列的，所以其往往和原始任务顺序不同。</p><h3 id="②、asyncio-gather"><a href="#②、asyncio-gather" class="headerlink" title="②、asyncio.gather()"></a>②、asyncio.gather()</h3><p><strong>如果只关心协程并发运行后的结果集合，可以使用<code>gather()</code>，它不仅通过await返回仅一个结果集，而且这个结果集的结果顺序是传入任务的原始顺序。</strong></p><ul><li>例如：</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> time<span class="token keyword">import</span> asyncio<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">taskIO_1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'开始运行IO任务1...'</span><span class="token punctuation">)</span>    <span class="token keyword">await</span> asyncio<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>  <span class="token comment"># 假设该任务耗时3s</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'IO任务1已完成，耗时3s'</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> taskIO_1<span class="token punctuation">.</span>__name__<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">taskIO_2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'开始运行IO任务2...'</span><span class="token punctuation">)</span>    <span class="token keyword">await</span> asyncio<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>  <span class="token comment"># 假设该任务耗时2s</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'IO任务2已完成，耗时2s'</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> taskIO_2<span class="token punctuation">.</span>__name__<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment"># 调用方</span>    resualts <span class="token operator">=</span> <span class="token keyword">await</span> asyncio<span class="token punctuation">.</span>gather<span class="token punctuation">(</span>taskIO_1<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> taskIO_2<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># 子生成器</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>resualts<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    start <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>    loop <span class="token operator">=</span> asyncio<span class="token punctuation">.</span>get_event_loop<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 创建一个事件循环对象loop</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        loop<span class="token punctuation">.</span>run_until_complete<span class="token punctuation">(</span>main<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># 完成事件循环，直到最后一个任务结束</span>    <span class="token keyword">finally</span><span class="token punctuation">:</span>        loop<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 结束事件循环</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'所有IO任务总耗时%.5f秒'</span> <span class="token operator">%</span> <span class="token builtin">float</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span>start<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>结果为：</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">开始运行IO任务<span class="token number">1.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>开始运行IO任务<span class="token number">2.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>IO任务<span class="token number">2</span>已完成，耗时2sIO任务<span class="token number">1</span>已完成，耗时3s<span class="token punctuation">[</span><span class="token string">'taskIO_1'</span><span class="token punctuation">,</span> <span class="token string">'taskIO_2'</span><span class="token punctuation">]</span>所有IO任务总耗时<span class="token number">3.00936</span>秒<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>gather()</code>通过<code>await</code>直接返回一个结果集列表，我们可以清晰的从执行结果看出来，虽然任务2是先完成的，但最后返回的结果集的顺序是按照初始传入的任务顺序排的。</p><h3 id="③、asyncio-as-completed"><a href="#③、asyncio-as-completed" class="headerlink" title="③、asyncio.as_completed()"></a>③、asyncio.as_completed()</h3><p><strong><code>as_completed(tasks)</code>是一个生成器，它管理着一个协程列表(此处是传入的<code>tasks</code>)的运行。当任务集合中的某个任务率先执行完毕时，会率先通过await关键字返回该任务结果。可见其返回结果的顺序和<code>wait()</code>一样，均是按照完成任务顺序排列的。</strong></p><ul><li>例如：</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> time<span class="token keyword">import</span> asyncio<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">taskIO_1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'开始运行IO任务1...'</span><span class="token punctuation">)</span>    <span class="token keyword">await</span> asyncio<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>  <span class="token comment"># 假设该任务耗时3s</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'IO任务1已完成，耗时3s'</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> taskIO_1<span class="token punctuation">.</span>__name__<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">taskIO_2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'开始运行IO任务2...'</span><span class="token punctuation">)</span>    <span class="token keyword">await</span> asyncio<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>  <span class="token comment"># 假设该任务耗时2s</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'IO任务2已完成，耗时2s'</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> taskIO_2<span class="token punctuation">.</span>__name__<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment"># 调用方</span>    tasks <span class="token operator">=</span> <span class="token punctuation">[</span>taskIO_1<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> taskIO_2<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span>  <span class="token comment"># 把所有任务添加到task中</span>    <span class="token keyword">for</span> completed_task <span class="token keyword">in</span> asyncio<span class="token punctuation">.</span>as_completed<span class="token punctuation">(</span>tasks<span class="token punctuation">)</span><span class="token punctuation">:</span>        resualt <span class="token operator">=</span> <span class="token keyword">await</span> completed_task <span class="token comment"># 子生成器</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'协程无序返回值：'</span><span class="token operator">+</span>resualt<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    start <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>    loop <span class="token operator">=</span> asyncio<span class="token punctuation">.</span>get_event_loop<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 创建一个事件循环对象loop</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        loop<span class="token punctuation">.</span>run_until_complete<span class="token punctuation">(</span>main<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># 完成事件循环，直到最后一个任务结束</span>    <span class="token keyword">finally</span><span class="token punctuation">:</span>        loop<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 结束事件循环</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'所有IO任务总耗时%.5f秒'</span> <span class="token operator">%</span> <span class="token builtin">float</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span>start<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>结果为：</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">开始运行IO任务<span class="token number">2.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>开始运行IO任务<span class="token number">1.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>IO任务<span class="token number">2</span>已完成，耗时2s协程无序返回值：taskIO_2IO任务<span class="token number">1</span>已完成，耗时3s协程无序返回值：taskIO_1所有IO任务总耗时<span class="token number">3.00300</span>秒<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>从上面的程序可以看出，使用<code>as_completed(tasks)</code>和<code>wait(tasks)</code>相同之处是返回结果的顺序是协程的完成顺序，这与<code>gather()</code>恰好相反。而不同之处是<code>as_completed(tasks)</code>可以实时返回当前完成的结果，而<code>wait(tasks)</code>需要等待所有协程结束后返回的done去获得结果。</p><h1 id="二、aiohttp"><a href="#二、aiohttp" class="headerlink" title="二、aiohttp"></a>二、aiohttp</h1><ul><li>官方文档：<a href="https://docs.aiohttp.org/en/stable/">https://docs.aiohttp.org/en/stable/</a></li></ul><hr><h2 id="1、多线程与异步的区别"><a href="#1、多线程与异步的区别" class="headerlink" title="1、多线程与异步的区别"></a>1、多线程与异步的区别</h2><p><img src="https://img-blog.csdnimg.cn/56ccf3bb24ee41399f5a247ab12f2719.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6L-c5pa555qE5pif,size_20,color_FFFFFF,t_70,g_se,x_16"><br>异步爬虫不同于多进程爬虫，它使用单线程(即仅创建一个事件循环，然后把所有任务添加到事件循环中)就能并发处理多任务。在轮询到某个任务后，当遇到耗时操作(如请求URL)时，挂起该任务并进行下一个任务，当之前被挂起的任务更新了状态(如获得了网页响应)，则被唤醒，程序继续从上次挂起的地方运行下去。极大的减少了中间不必要的等待时间。</p><hr><h2 id="2、aiohttp安装"><a href="#2、aiohttp安装" class="headerlink" title="2、aiohttp安装"></a>2、aiohttp安装</h2><ul><li>原因<br><code>aiohttp</code>库，用来实现异步网页请求等功能，相当于异步版的<code>requests</code>库</li><li>安装</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">pip3 install aiohttp<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h2 id="3、ClientSession"><a href="#3、ClientSession" class="headerlink" title="3、ClientSession"></a>3、ClientSession</h2><p>在协程中使用<code>ClientSession()</code>的<code>get()</code>或<code>request()</code>方法来请求网页。(其中<code>async with</code>是<strong>异步上下文管理器</strong>，其封装了异步实现等功能)</p><ul><li>例如：</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> aiohttp<span class="token keyword">import</span> asyncio<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">get_text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">async</span> <span class="token keyword">with</span> aiohttp<span class="token punctuation">.</span>ClientSession<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> session<span class="token punctuation">:</span>        <span class="token keyword">async</span> <span class="token keyword">with</span> session<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'http://httpbin.org/get'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> resp<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>resp<span class="token punctuation">.</span>status<span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token keyword">await</span> resp<span class="token punctuation">.</span>text<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    loop <span class="token operator">=</span> asyncio<span class="token punctuation">.</span>get_event_loop<span class="token punctuation">(</span><span class="token punctuation">)</span>    task <span class="token operator">=</span> get_text<span class="token punctuation">(</span><span class="token punctuation">)</span>    loop<span class="token punctuation">.</span>run_until_complete<span class="token punctuation">(</span>task<span class="token punctuation">)</span>    loop<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>     main<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>输出结果为：</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token number">200</span><span class="token punctuation">{</span>  <span class="token string">"args"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>   <span class="token string">"headers"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token string">"Accept"</span><span class="token punctuation">:</span> <span class="token string">"*/*"</span><span class="token punctuation">,</span>     <span class="token string">"Accept-Encoding"</span><span class="token punctuation">:</span> <span class="token string">"gzip, deflate"</span><span class="token punctuation">,</span>     <span class="token string">"Host"</span><span class="token punctuation">:</span> <span class="token string">"httpbin.org"</span><span class="token punctuation">,</span>     <span class="token string">"User-Agent"</span><span class="token punctuation">:</span> <span class="token string">"Python/3.8 aiohttp/3.8.1"</span><span class="token punctuation">,</span>     <span class="token string">"X-Amzn-Trace-Id"</span><span class="token punctuation">:</span> <span class="token string">"Root=1-6216f458-66a3ef0733ff064f527672f8"</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>   <span class="token string">"origin"</span><span class="token punctuation">:</span> <span class="token string">"36.153.167.77"</span><span class="token punctuation">,</span>   <span class="token string">"url"</span><span class="token punctuation">:</span> <span class="token string">"http://httpbin.org/get"</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>还可以这样使用：</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">session<span class="token punctuation">.</span>request<span class="token punctuation">(</span>method<span class="token operator">=</span><span class="token string">'GET'</span><span class="token punctuation">,</span> url<span class="token operator">=</span><span class="token string">'http://httpbin.org/request'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="三、参考文章"><a href="#三、参考文章" class="headerlink" title="三、参考文章"></a>三、参考文章</h1><p><a href="https://cuiqingcai.com/6160.html">Python 中异步协程的使用方法介绍</a></p><p><a href="https://blog.csdn.net/SL_World/article/details/86691747">Python异步IO之协程(二):使用asyncio的不同方法实现协程</a></p><p><a href="https://blog.csdn.net/SL_World/article/details/86633611">Python实战异步爬虫(协程)+分布式爬虫(多进程)</a></p>]]></content>
      
      
      <categories>
          
          <category> 爬虫 </category>
          
          <category> asyncio </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
            <tag> asyncio </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【GitHub】学习笔记</title>
      <link href="/2022/02/19/github-xue-xi-bi-ji/"/>
      <url>/2022/02/19/github-xue-xi-bi-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="一、GitHub初识"><a href="#一、GitHub初识" class="headerlink" title="一、GitHub初识"></a>一、GitHub初识</h1><h2 id="1、创建仓库"><a href="#1、创建仓库" class="headerlink" title="1、创建仓库"></a>1、创建仓库</h2><p>注册成功登陆后，点击<code>create repository</code><br><img src="https://img-blog.csdnimg.cn/24a342741a1b4f4482ba0cfb155f1eca.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6L-c5pa555qE5pif,size_20,color_FFFFFF,t_70,g_se,x_16"></p><p>根据提示进行填写，这里是记录自己第一次使用，选择私人仓库。</p><p><img src="https://img-blog.csdnimg.cn/d277aa337d414b6f8948e5b2bf9391e9.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6L-c5pa555qE5pif,size_20,color_FFFFFF,t_70,g_se,x_16"></p><p>创建成功，就进入了仓库主页</p><p><img src="https://img-blog.csdnimg.cn/39d86423610a40dab383c533494748f1.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6L-c5pa555qE5pif,size_20,color_FFFFFF,t_70,g_se,x_16"></p><h2 id="2、仓库管理"><a href="#2、仓库管理" class="headerlink" title="2、仓库管理"></a>2、仓库管理</h2><p>新建文件</p><p><img src="https://img-blog.csdnimg.cn/8e5e22bdf40b4845ac4a5fb9a0c2081c.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6L-c5pa555qE5pif,size_20,color_FFFFFF,t_70,g_se,x_16"></p><p>进入新建文件页面<br><img src="https://img-blog.csdnimg.cn/0bf6425e165e420897adb1ab7e935742.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6L-c5pa555qE5pif,size_20,color_FFFFFF,t_70,g_se,x_16"><br>然后来看一下preview。<br><img src="https://img-blog.csdnimg.cn/f73502458f3d444da2031bb6f7d00a2d.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6L-c5pa555qE5pif,size_20,color_FFFFFF,t_70,g_se,x_16"><br>创建之后，会自动跳转到仓库主页<br><img src="https://img-blog.csdnimg.cn/f7061261bcef4c5086e7425850ab3fab.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6L-c5pa555qE5pif,size_20,color_FFFFFF,t_70,g_se,x_16"></p><p>然后，我这里选择点击文件名<code>python1</code>，进入新的页面<br><img src="https://img-blog.csdnimg.cn/3af8a765171a4d28a727325454a29755.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6L-c5pa555qE5pif,size_20,color_FFFFFF,t_70,g_se,x_16"><br>点击编辑（🖊），进入编辑页面。</p><p><img src="https://img-blog.csdnimg.cn/67324c2c51c74406a391e0415badad4f.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6L-c5pa555qE5pif,size_20,color_FFFFFF,t_70,g_se,x_16"><br>成功提交之后，会返回刚刚的页面<br><img src="https://img-blog.csdnimg.cn/cafa110cabe54617b6a26ba5cdc3c7fd.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6L-c5pa555qE5pif,size_20,color_FFFFFF,t_70,g_se,x_16"><br>这里选择点击仓库名<code>python_test</code>，返回仓库主页，再点击发生变化的描述，查看提交的详细情况。</p><p><img src="https://img-blog.csdnimg.cn/a5b83bb6ac824a9f9668c02b02d47820.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6L-c5pa555qE5pif,size_20,color_FFFFFF,t_70,g_se,x_16"><br>在仓库主页，点击<code>commits</code>，可以查看历史提交版本<br><img src="https://img-blog.csdnimg.cn/e1eabd7d2b4248e18d1eca6852aea19c.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6L-c5pa555qE5pif,size_20,color_FFFFFF,t_70,g_se,x_16"><br><img src="https://img-blog.csdnimg.cn/5489ca5f8cd04e539803959fbf3b2c19.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6L-c5pa555qE5pif,size_20,color_FFFFFF,t_70,g_se,x_16"></p><h2 id="3、上传文件"><a href="#3、上传文件" class="headerlink" title="3、上传文件"></a>3、上传文件</h2><p>在仓库主页进行以下操作<br><img src="https://img-blog.csdnimg.cn/ee24021b7f6e46ce92bbd92f3068c9f7.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6L-c5pa555qE5pif,size_20,color_FFFFFF,t_70,g_se,x_16"><br><img src="https://img-blog.csdnimg.cn/4568eca8ba544d088e23a1e69e607883.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6L-c5pa555qE5pif,size_20,color_FFFFFF,t_70,g_se,x_16"><br>上传成功之后，会自动返回仓库主页<br><img src="https://img-blog.csdnimg.cn/3460e1bde26c44dc848718ce3dd7d3e3.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6L-c5pa555qE5pif,size_20,color_FFFFFF,t_70,g_se,x_16"><br>在仓库主页，还可以搜索文件，根据文件名进行搜索<br><img src="https://img-blog.csdnimg.cn/454530d42d4f4aa3b0dbb03376447816.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6L-c5pa555qE5pif,size_20,color_FFFFFF,t_70,g_se,x_16"></p><h2 id="4、关注、收藏、克隆、issues"><a href="#4、关注、收藏、克隆、issues" class="headerlink" title="4、关注、收藏、克隆、issues"></a>4、关注、收藏、克隆、issues</h2><p>关注：关注之后，作者仓库发生变化，你会收到提示信息；</p><p>收藏：收藏仓库，方便查找；</p><p>克隆（复制）：创建一个和作者仓库一样的仓库，不会动态变化，即作者之后更新的内容，你的仓库不会发生变化；</p><p>发送请求：如果你克隆了一个作者的仓库，还想和作者同步，那么可以选择发送请求。</p><p> issues：用于发现bug，讨论使用，也可以理解为<code>私信</code></p><p><img src="https://img-blog.csdnimg.cn/a9405f9ec943465380ee7e519b9acd9b.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6L-c5pa555qE5pif,size_20,color_FFFFFF,t_70,g_se,x_16"></p><p>进行以下步骤，查看自己的收藏<br><img src="https://img-blog.csdnimg.cn/dd7f61b10a494fdf899a946309520003.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6L-c5pa555qE5pif,size_20,color_FFFFFF,t_70,g_se,x_16"></p><h1 id="二、git远程操作"><a href="#二、git远程操作" class="headerlink" title="二、git远程操作"></a>二、git远程操作</h1><h2 id="1、安装git"><a href="#1、安装git" class="headerlink" title="1、安装git"></a>1、安装git</h2><p>安装教程，可以参考：</p><p><a href="https://blog.csdn.net/mukes/article/details/115693833">Git 详细安装教程（详解 Git 安装过程的每一个步骤）</a></p><h2 id="2、git初始化即仓库创建和操作"><a href="#2、git初始化即仓库创建和操作" class="headerlink" title="2、git初始化即仓库创建和操作"></a>2、git初始化即仓库创建和操作</h2><p>基本信息设置</p><p>查看设置</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">git config <span class="token operator">-</span><span class="token operator">-</span><span class="token builtin">list</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>设置用户名：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">git config <span class="token operator">-</span><span class="token operator">-</span><span class="token keyword">global</span> user<span class="token punctuation">.</span>name <span class="token string">'此处填用户名'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>设置用户邮箱：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">git config <span class="token operator">-</span><span class="token operator">-</span><span class="token keyword">global</span> user<span class="token punctuation">.</span>email <span class="token string">'此处填邮箱'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/ec5c741715b94f8f94cc6b2e260df18d.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6L-c5pa555qE5pif,size_20,color_FFFFFF,t_70,g_se,x_16"></p><ul><li><strong>Git基本工作流程：</strong><br>新建或修改文件 ——&gt; 文件提交到缓存区 ——&gt; 文件提交到Git仓库<br>①、新建仓库需要初始化，初始化命令为：<code>git init</code><br>②、提交文件到暂存区命令格式为：<code>git add 文件名</code><br>③、提交文件到Git仓库格式为：<code>git commit -m “提交文件的描述”</code></li></ul><p><strong>每次提交文件都可以使用命令 <code>git status</code> 来查询当前文件状态。</strong></p><p><img src="https://img-blog.csdnimg.cn/2709234fd58e40058b49760abe026abb.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6L-c5pa555qE5pif,size_20,color_FFFFFF,t_70,g_se,x_16"></p><h2 id="3、git的克隆操作"><a href="#3、git的克隆操作" class="headerlink" title="3、git的克隆操作"></a>3、git的克隆操作</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python">git clone 仓库地址<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/2c59c79a1d6341899d5785253ea39902.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6L-c5pa555qE5pif,size_20,color_FFFFFF,t_70,g_se,x_16"></p><h2 id="4、git的远程操作"><a href="#4、git的远程操作" class="headerlink" title="4、git的远程操作"></a>4、git的远程操作</h2><p>需要配合<code>上述内容</code>进行操作</p><p>作用：备份、实现代码共享</p><p><strong>①、新建一个仓库</strong><br><strong>②、在新建文件夹中打开Git Bash</strong><br><strong>③、克隆新建的仓库，会生成一个和仓库名相同的文件夹</strong><br><strong>④、cd 项目名</strong><br><strong>⑤、把需要上传的文件，全放到这个和仓库名相同的文件夹里</strong><br><strong>⑥、git add .（注意，有个点）</strong><br><strong>⑦、git commit -m “提交文件的描述”</strong><br><strong>⑧、在与仓库名同名的文件夹中找到.git文件，在.git文件中找到config文件，右键打开（我使用的vscode），将里面的url改成ssh内容，操作如下</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">ssh<span class="token operator">-</span>keygen <span class="token operator">-</span>t rsa <span class="token operator">-</span>C <span class="token string">"绑定GitHub的邮箱"</span>然后连续三个空格，不输入密码cat id_rsa<span class="token punctuation">.</span>pub复制上述命令得到的key<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/e4ba91b2cc924fb2886eff6aad50b99a.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6L-c5pa555qE5pif,size_20,color_FFFFFF,t_70,g_se,x_16"></p><p><img src="https://img-blog.csdnimg.cn/ef697a3b328c47668a82034bac23f843.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6L-c5pa555qE5pif,size_20,color_FFFFFF,t_70,g_se,x_16"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">将刚刚复制的key值，放到提示的位置<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/508b225a522d486d8928142a50faeb59.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6L-c5pa555qE5pif,size_20,color_FFFFFF,t_70,g_se,x_16"><br><img src="https://img-blog.csdnimg.cn/cc7806bb7b864bdb915b689db722dcf8.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6L-c5pa555qE5pif,size_20,color_FFFFFF,t_70,g_se,x_16"><br><strong>⑨、git push origin main</strong></p><p><img src="https://img-blog.csdnimg.cn/b65e13be7ae44e20815aac91e833f8b7.png"><br><strong>⑩、上传成功！！！</strong><br><img src="https://img-blog.csdnimg.cn/1a356cb9303241128331d56d2ba977c6.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6L-c5pa555qE5pif,size_20,color_FFFFFF,t_70,g_se,x_16"></p><h2 id="5、git指令"><a href="#5、git指令" class="headerlink" title="5、git指令"></a>5、git指令</h2><p>参考：<a href="https://www.runoob.com/note/56524">Git 常用命令大全</a></p><p><img src="https://img-blog.csdnimg.cn/efd0af0ce893495f83c3b79e1e256e69.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6L-c5pa555qE5pif,size_20,color_FFFFFF,t_70,g_se,x_16"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">git init                                                  <span class="token comment"># 初始化本地git仓库（创建新仓库）</span>git config <span class="token operator">-</span><span class="token operator">-</span><span class="token keyword">global</span> user<span class="token punctuation">.</span>name <span class="token string">"xxx"</span>                       <span class="token comment"># 配置用户名</span>git config <span class="token operator">-</span><span class="token operator">-</span><span class="token keyword">global</span> user<span class="token punctuation">.</span>email <span class="token string">"xxx@xxx.com"</span>              <span class="token comment"># 配置邮件</span>git config <span class="token operator">-</span><span class="token operator">-</span><span class="token keyword">global</span> color<span class="token punctuation">.</span>ui true                         <span class="token comment"># git status等命令自动着色</span>git config <span class="token operator">-</span><span class="token operator">-</span><span class="token keyword">global</span> color<span class="token punctuation">.</span>status autogit config <span class="token operator">-</span><span class="token operator">-</span><span class="token keyword">global</span> color<span class="token punctuation">.</span>diff autogit config <span class="token operator">-</span><span class="token operator">-</span><span class="token keyword">global</span> color<span class="token punctuation">.</span>branch autogit config <span class="token operator">-</span><span class="token operator">-</span><span class="token keyword">global</span> color<span class="token punctuation">.</span>interactive autogit config <span class="token operator">-</span><span class="token operator">-</span><span class="token keyword">global</span> <span class="token operator">-</span><span class="token operator">-</span>unset http<span class="token punctuation">.</span>proxy                    <span class="token comment"># remove  proxy configuration on git</span>git clone git<span class="token operator">+</span>ssh<span class="token punctuation">:</span><span class="token operator">//</span>git@<span class="token number">192.168</span><span class="token number">.53</span><span class="token number">.168</span><span class="token operator">/</span>VT<span class="token punctuation">.</span>git             <span class="token comment"># clone远程仓库</span>git status                                                <span class="token comment"># 查看当前版本状态（是否修改）</span>git add xyz                                               <span class="token comment"># 添加xyz文件至index</span>git add <span class="token punctuation">.</span>                                                 <span class="token comment"># 增加当前子目录下所有更改过的文件至index</span>git commit <span class="token operator">-</span>m <span class="token string">'xxx'</span>                                       <span class="token comment"># 提交</span>git commit <span class="token operator">-</span><span class="token operator">-</span>amend <span class="token operator">-</span>m <span class="token string">'xxx'</span>                               <span class="token comment"># 合并上一次提交（用于反复修改）</span>git commit <span class="token operator">-</span>am <span class="token string">'xxx'</span>                                      <span class="token comment"># 将add和commit合为一步</span>git rm xxx                                                <span class="token comment"># 删除index中的文件</span>git rm <span class="token operator">-</span>r <span class="token operator">*</span>                                               <span class="token comment"># 递归删除</span>git log                                                   <span class="token comment"># 显示提交日志</span>git log <span class="token operator">-</span><span class="token number">1</span>                                                <span class="token comment"># 显示1行日志 -n为n行</span>git log <span class="token operator">-</span><span class="token number">5</span>git log <span class="token operator">-</span><span class="token operator">-</span>stat                                            <span class="token comment"># 显示提交日志及相关变动文件</span>git log <span class="token operator">-</span>p <span class="token operator">-</span>mgit show dfb02e6e4f2f7b573337763e5c0013802e392818         <span class="token comment"># 显示某个提交的详细内容</span>git show dfb02                                            <span class="token comment"># 可只用commitid的前几位</span>git show HEAD                                             <span class="token comment"># 显示HEAD提交日志</span>git show HEAD<span class="token operator">^</span>                                            <span class="token comment"># 显示HEAD的父（上一个版本）的提交日志 ^^为上两个版本 ^5为上5个版本</span>git tag                                                   <span class="token comment"># 显示已存在的tag</span>git tag <span class="token operator">-</span>a v2<span class="token punctuation">.</span><span class="token number">0</span> <span class="token operator">-</span>m <span class="token string">'xxx'</span>                                  <span class="token comment"># 增加v2.0的tag</span>git show v2<span class="token punctuation">.</span><span class="token number">0</span>                                             <span class="token comment"># 显示v2.0的日志及详细内容</span>git log v2<span class="token punctuation">.</span><span class="token number">0</span>                                              <span class="token comment"># 显示v2.0的日志</span>git diff                                                  <span class="token comment"># 显示所有未添加至index的变更</span>git diff <span class="token operator">-</span><span class="token operator">-</span>cached                                         <span class="token comment"># 显示所有已添加index但还未commit的变更</span>git diff HEAD<span class="token operator">^</span>                                            <span class="token comment"># 比较与上一个版本的差异</span>git diff HEAD <span class="token operator">-</span><span class="token operator">-</span> <span class="token punctuation">.</span><span class="token operator">/</span>lib                                    <span class="token comment"># 比较与HEAD版本lib目录的差异</span>git diff origin<span class="token operator">/</span>master<span class="token punctuation">.</span><span class="token punctuation">.</span>master                            <span class="token comment"># 比较远程分支master上有本地分支master上没有的</span>git diff origin<span class="token operator">/</span>master<span class="token punctuation">.</span><span class="token punctuation">.</span>master <span class="token operator">-</span><span class="token operator">-</span>stat                     <span class="token comment"># 只显示差异的文件，不显示具体内容</span>git remote add origin git<span class="token operator">+</span>ssh<span class="token punctuation">:</span><span class="token operator">//</span>git@<span class="token number">192.168</span><span class="token number">.53</span><span class="token number">.168</span><span class="token operator">/</span>VT<span class="token punctuation">.</span>git <span class="token comment"># 增加远程定义（用于push/pull/fetch）</span>git branch                                                <span class="token comment"># 显示本地分支</span>git branch <span class="token operator">-</span><span class="token operator">-</span>contains <span class="token number">50089</span>                               <span class="token comment"># 显示包含提交50089的分支</span>git branch <span class="token operator">-</span>a                                             <span class="token comment"># 显示所有分支</span>git branch <span class="token operator">-</span>r                                             <span class="token comment"># 显示所有原创分支</span>git branch <span class="token operator">-</span><span class="token operator">-</span>merged                                       <span class="token comment"># 显示所有已合并到当前分支的分支</span>git branch <span class="token operator">-</span><span class="token operator">-</span>no<span class="token operator">-</span>merged                                    <span class="token comment"># 显示所有未合并到当前分支的分支</span>git branch <span class="token operator">-</span>m master master_copy                          <span class="token comment"># 本地分支改名</span>git checkout <span class="token operator">-</span>b master_copy                               <span class="token comment"># 从当前分支创建新分支master_copy并检出</span>git checkout <span class="token operator">-</span>b master master_copy                        <span class="token comment"># 上面的完整版</span>git checkout features<span class="token operator">/</span>performance                         <span class="token comment"># 检出已存在的features/performance分支</span>git checkout <span class="token operator">-</span><span class="token operator">-</span>track hotfixes<span class="token operator">/</span>BJVEP933                    <span class="token comment"># 检出远程分支hotfixes/BJVEP933并创建本地跟踪分支</span>git checkout v2<span class="token punctuation">.</span><span class="token number">0</span>                                         <span class="token comment"># 检出版本v2.0</span>git checkout <span class="token operator">-</span>b devel origin<span class="token operator">/</span>develop                      <span class="token comment"># 从远程分支develop创建新本地分支devel并检出</span>git checkout <span class="token operator">-</span><span class="token operator">-</span> README                                    <span class="token comment"># 检出head版本的README文件（可用于修改错误回退）</span>git merge origin<span class="token operator">/</span>master                                   <span class="token comment"># 合并远程master分支至当前分支</span>git cherry<span class="token operator">-</span>pick ff44785404a8e                             <span class="token comment"># 合并提交ff44785404a8e的修改</span>git push origin master                                    <span class="token comment"># 将当前分支push到远程master分支</span>git push origin <span class="token punctuation">:</span>hotfixes<span class="token operator">/</span>BJVEP933                        <span class="token comment"># 删除远程仓库的hotfixes/BJVEP933分支</span>git push <span class="token operator">-</span><span class="token operator">-</span>tags                                           <span class="token comment"># 把所有tag推送到远程仓库</span>git fetch                                                 <span class="token comment"># 获取所有远程分支（不更新本地分支，另需merge）</span>git fetch <span class="token operator">-</span><span class="token operator">-</span>prune                                         <span class="token comment"># 获取所有原创分支并清除服务器上已删掉的分支</span>git pull origin master                                    <span class="token comment"># 获取远程分支master并merge到当前分支</span>git mv README README2                                     <span class="token comment"># 重命名文件README为README2</span>git reset <span class="token operator">-</span><span class="token operator">-</span>hard HEAD                                     <span class="token comment"># 将当前版本重置为HEAD（通常用于merge失败回退）</span>git rebasegit branch <span class="token operator">-</span>d hotfixes<span class="token operator">/</span>BJVEP933                           <span class="token comment"># 删除分支hotfixes/BJVEP933（本分支修改已合并到其他分支）</span>git branch <span class="token operator">-</span>D hotfixes<span class="token operator">/</span>BJVEP933                           <span class="token comment"># 强制删除分支hotfixes/BJVEP933</span>git ls<span class="token operator">-</span>files                                              <span class="token comment"># 列出git index包含的文件</span>git show<span class="token operator">-</span>branch                                           <span class="token comment"># 图示当前分支历史</span>git show<span class="token operator">-</span>branch <span class="token operator">-</span><span class="token operator">-</span><span class="token builtin">all</span>                                     <span class="token comment"># 图示所有分支历史</span>git whatchanged                                           <span class="token comment"># 显示提交历史对应的文件修改</span>git revert dfb02e6e4f2f7b573337763e5c0013802e392818       <span class="token comment"># 撤销提交dfb02e6e4f2f7b573337763e5c0013802e392818</span>git ls<span class="token operator">-</span>tree HEAD                                          <span class="token comment"># 内部命令：显示某个git对象</span>git rev<span class="token operator">-</span>parse v2<span class="token punctuation">.</span><span class="token number">0</span>                                        <span class="token comment"># 内部命令：显示某个ref对于的SHA1 HASH</span>git reflog                                                <span class="token comment"># 显示所有提交，包括孤立节点</span>git show HEAD@<span class="token punctuation">{</span><span class="token number">5</span><span class="token punctuation">}</span>git show master@<span class="token punctuation">{</span>yesterday<span class="token punctuation">}</span>                               <span class="token comment"># 显示master分支昨天的状态</span>git log <span class="token operator">-</span><span class="token operator">-</span>pretty<span class="token operator">=</span><span class="token builtin">format</span><span class="token punctuation">:</span><span class="token string">'%h %s'</span> <span class="token operator">-</span><span class="token operator">-</span>graph                   <span class="token comment"># 图示提交日志</span>git show HEAD<span class="token operator">~</span><span class="token number">3</span>git show <span class="token operator">-</span>s <span class="token operator">-</span><span class="token operator">-</span>pretty<span class="token operator">=</span>raw 2be7fcb476git stash                                                 <span class="token comment"># 暂存当前修改，将所有至为HEAD状态</span>git stash <span class="token builtin">list</span>                                            <span class="token comment"># 查看所有暂存</span>git stash show <span class="token operator">-</span>p stash@<span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span>                               <span class="token comment"># 参考第一次暂存</span>git stash <span class="token builtin">apply</span> stash@<span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span>                                 <span class="token comment"># 应用第一次暂存</span>git grep <span class="token string">"delete from"</span>                                    <span class="token comment"># 文件中搜索文本“delete from”</span>git grep <span class="token operator">-</span>e <span class="token string">'#define'</span> <span class="token operator">-</span><span class="token operator">-</span><span class="token keyword">and</span> <span class="token operator">-</span>e SORT_DIRENTgit gcgit fsck<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="三、GitHub-Pages-搭建个人博客"><a href="#三、GitHub-Pages-搭建个人博客" class="headerlink" title="三、GitHub Pages 搭建个人博客"></a>三、GitHub Pages 搭建个人博客</h1><ul><li><strong>博主自己搭建的个人博客：</strong></li></ul><p><strong><a href="https://polaris119.github.io/">Polaris119温暖的小窝</a></strong></p><ul><li><strong>搭建个人博客参考的文章：</strong></li></ul><p><strong><a href="https://www.cnblogs.com/shwee/p/11421156.html">https://www.cnblogs.com/shwee/p/11421156.html</a></strong></p>]]></content>
      
      
      <categories>
          
          <category> GitHub </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GitHub </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【总结】大学四年来，用过的一些网站整理</title>
      <link href="/2022/02/15/zong-jie-da-xue-si-nian-lai-yong-guo-de-yi-xie-wang-zhan-zheng-li/"/>
      <url>/2022/02/15/zong-jie-da-xue-si-nian-lai-yong-guo-de-yi-xie-wang-zhan-zheng-li/</url>
      
        <content type="html"><![CDATA[<h2 id="💓前言"><a href="#💓前言" class="headerlink" title="💓前言"></a>💓前言</h2><ul><li><strong>1、电脑在大学四年生涯中，刷机一次，由于第一次刷机，备份没有很完全，丢掉了一些用的次数比较少的网站。</strong></li><li><strong>2、序号并非排名</strong></li><li><strong>3、本文不是任何平台或软件的广告！！！</strong></li></ul><h2 id="📖一、学习平台"><a href="#📖一、学习平台" class="headerlink" title="📖一、学习平台"></a>📖一、学习平台</h2><p><strong>1、中国大学MOOC（慕课）</strong></p><p><strong><code>好的大学，没有围墙 </code></strong></p><p><a href="https://www.icourse163.org/">https://www.icourse163.org/</a></p><p><img src="https://img-blog.csdnimg.cn/3965a2c7febc4b0b9df00af0e940f946.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6L-c5pa555qE5pif,size_20,color_FFFFFF,t_70,g_se,x_16"><br>到了大学，老师告知的第一个学习网站，不仅可以看到中国各所学校开设的一些课程，也常被老师用于辅助讲课。尤其是疫情期间，想必很大人都被老师安利过吧！</p><p><strong>2、哔哩哔哩（B站）</strong></p><p><strong><code>B站大学，不是浪得虚名的</code></strong></p><p><a href="https://www.bilibili.com/">https://www.bilibili.com/</a></p><p><img src="https://img-blog.csdnimg.cn/415fec6a134f481688cde3724cdfef2b.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6L-c5pa555qE5pif,size_20,color_FFFFFF,t_70,g_se,x_16"><br>平时，B站作为休闲娱乐平台，但是到了期末复习周时，便化身为学习神器，挽救万千学子于水火之中（<del>突击学习，防挂科</del> ）</p><p><strong>3、菜鸟教程</strong></p><p><strong><code>菜鸟教程，不是菜鸟驿站哦~</code></strong></p><p><a href="https://www.runoob.com/">https://www.runoob.com/</a></p><p><img src="https://img-blog.csdnimg.cn/dba53f15b9944177bf446acdb357e629.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6L-c5pa555qE5pif,size_20,color_FFFFFF,t_70,g_se,x_16"><br>初学编程，常常在百度中见到的网站</p><p><strong>4、Github</strong></p><p><strong><code>课设的cv神器</code></strong></p><p><a href="https://github.com/">https://github.com/</a></p><p><img src="https://img-blog.csdnimg.cn/df7ac2a2034649b2b0bbd4b136f3230d.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6L-c5pa555qE5pif,size_20,color_FFFFFF,t_70,g_se,x_16"><br>有了github，妈妈再也不用担心我的课设啦。</p><p>但有时候，GitHub会进不去，有人测试过，妹15分钟，可以进入5分钟。</p><p>因此，在需要时，我可能会选择科学上网。</p><p><strong>5、CSDN</strong></p><p><strong><code>咱们的C站也是很行的</code></strong></p><p><a href="https://blog.csdn.net/qq_44921056">https://blog.csdn.net/qq_44921056</a><br><img src="https://img-blog.csdnimg.cn/f57ee5a6f3434be8bcdcef084f3ddef5.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6L-c5pa555qE5pif,size_20,color_FFFFFF,t_70,g_se,x_16"><br>你都看到这篇文章了，就不要多介绍了吧~</p><p><strong>6、博客园</strong></p><p><code>CSDN已经出现了，博客园还会远吗？</code></p><p><a href="https://www.cnblogs.com/">https://www.cnblogs.com/</a><br><img src="https://img-blog.csdnimg.cn/2ed798df693c4dc4872613b3ddfd2fce.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6L-c5pa555qE5pif,size_20,color_FFFFFF,t_70,g_se,x_16"><br>有时候，经常在CSDN、博客园、掘金之间反复横跳</p><p><strong>7、掘金</strong></p><p><code>书中自有黄金屋</code></p><p><a href="https://juejin.cn/">https://juejin.cn/</a><br><img src="https://img-blog.csdnimg.cn/3b0a68ea3c6b4128aa165b1428a09b87.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6L-c5pa555qE5pif,size_20,color_FFFFFF,t_70,g_se,x_16"><br>代码不止，掘金不停！</p><p><strong>8、知乎</strong></p><p><strong><code>虽然不如前几年，但也能淘到有用的知识</code></strong></p><p><a href="https://www.zhihu.com/">https://www.zhihu.com/</a><br><img src="https://img-blog.csdnimg.cn/386d35f9f8c948f1b4d02396e3480142.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6L-c5pa555qE5pif,size_20,color_FFFFFF,t_70,g_se,x_16"><br>有些同学，刷知乎如刷抖音一般，知识面还是很广的，空闲时间可以看一看。</p><p><strong>9、力扣（LeetCode）</strong></p><p><code>刷题玩家狂喜</code></p><p><a href="https://leetcode-cn.com/">https://leetcode-cn.com/</a><br><img src="https://img-blog.csdnimg.cn/342ca7306a7d48498bf13a34b4017e4e.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6L-c5pa555qE5pif,size_20,color_FFFFFF,t_70,g_se,x_16"><br>少年，渴望力量吗？</p><p>来力扣刷题吧！</p><p>菜鸟到大牛的必经之路。</p><p><strong>10、w3school</strong></p><p><code>全球最大的中文Web技术教程</code></p><p><a href="https://www.w3school.com.cn/">https://www.w3school.com.cn/</a><br><img src="https://img-blog.csdnimg.cn/942cb83b586745ebbb4e91c7c92bcfbc.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6L-c5pa555qE5pif,size_20,color_FFFFFF,t_70,g_se,x_16"></p><p>免费的图文教程网站，就问你要不要吧？（<del>doge</del> ）</p><p><strong>11、易百教程</strong></p><p><code>用的比较少，不作评价</code></p><p><a href="https://www.yiibai.com/">https://www.yiibai.com/</a><br><img src="https://img-blog.csdnimg.cn/15eed23de6c4448f88cb567738390367.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6L-c5pa555qE5pif,size_20,color_FFFFFF,t_70,g_se,x_16"><br>12、网易云课堂</p><p><code>编程频道</code></p><p><a href="https://study.163.com/category/480000003131009">https://study.163.com/category/480000003131009</a></p><p><img src="https://img-blog.csdnimg.cn/2975f14f980045a6be3ff593cbe5568c.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6L-c5pa555qE5pif,size_20,color_FFFFFF,t_70,g_se,x_16"><br>收费，可根据自己实际情况而定。</p><p><strong>13、拉钩教育</strong></p><p><code>拉钩上吊一百年不许变</code></p><p><a href="https://kaiwu.lagou.com/">https://kaiwu.lagou.com/</a></p><p><img src="https://img-blog.csdnimg.cn/6970d1a6be6247b9bdc060aec50fb732.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6L-c5pa555qE5pif,size_20,color_FFFFFF,t_70,g_se,x_16"><br>部分免费，部分收费。可以根据自己实际情况而定。</p><p><strong>14、Spring Cloud中文导航&amp;Spring Boot中文导航</strong></p><ul><li><p><strong>Spring Cloud中文导航：<a href="http://springcloud.fun/">http://springcloud.fun/</a></strong><br><img src="https://img-blog.csdnimg.cn/152fcd23a35f45ef8719cc0a3651010f.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6L-c5pa555qE5pif,size_20,color_FFFFFF,t_70,g_se,x_16"></p></li><li><p><strong>Spring Boot中文导航：<a href="http://springboot.fun/">http://springboot.fun/</a></strong><br><img src="https://img-blog.csdnimg.cn/e54eb2af3eb84f58b26aa39a6572638e.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6L-c5pa555qE5pif,size_20,color_FFFFFF,t_70,g_se,x_16"><br>从大佬文章中了解的网站，还没用过，先码住！</p></li></ul><p><strong>15、百度网盘</strong></p><p><code>万物皆可白嫖</code></p><p><a href="https://pan.baidu.com/">https://pan.baidu.com/</a><br><img src="https://img-blog.csdnimg.cn/5194f71c47d14c7497e1fb4ed36bdc69.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6L-c5pa555qE5pif,size_20,color_FFFFFF,t_70,g_se,x_16"><br>差点把这个给忘了，用过都说好，就是下载速度比较慢，可以选择VIP服务，哦不，SVIP服务或者用科学方法。</p><h2 id="💻二、办公平台"><a href="#💻二、办公平台" class="headerlink" title="💻二、办公平台"></a>💻二、办公平台</h2><p>到了大学，会接触各种各样的办公软件，这里分享部分。</p><p><strong>1、金山文档</strong></p><p><a href="https://www.kdocs.cn/">https://www.kdocs.cn/</a></p><p><img src="https://img-blog.csdnimg.cn/c311e90cf7664ceca0892b1b73feb2da.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6L-c5pa555qE5pif,size_20,color_FFFFFF,t_70,g_se,x_16"><br><strong>2、石墨文档</strong></p><p><a href="https://shimo.im/">https://shimo.im/</a></p><p><img src="https://img-blog.csdnimg.cn/26f981d476dc42848e1a7bbafb202948.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6L-c5pa555qE5pif,size_20,color_FFFFFF,t_70,g_se,x_16"><br><strong>3、微云文档</strong></p><p><a href="https://doc.weiyun.com/">https://doc.weiyun.com/</a><br><img src="https://img-blog.csdnimg.cn/8dd23da832d54333bbfdce28e52681b1.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6L-c5pa555qE5pif,size_20,color_FFFFFF,t_70,g_se,x_16"><br><strong>4、问卷星</strong></p><p><a href="https://www.wjx.cn/">https://www.wjx.cn/</a><br><img src="https://img-blog.csdnimg.cn/34a300534d544929a1512683e7628ed5.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6L-c5pa555qE5pif,size_20,color_FFFFFF,t_70,g_se,x_16"><br>写到这个，社恐的我又开始害怕了。</p><p>做过毛概，马原的课设都知道。</p><p><strong>5、有道云笔记</strong></p><p><a href="https://note.youdao.com/?auto=1">https://note.youdao.com/?auto=1</a><br><img src="https://img-blog.csdnimg.cn/ca6849d0e9654ab28699be8d0c2343f9.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6L-c5pa555qE5pif,size_20,color_FFFFFF,t_70,g_se,x_16"><br><strong>6、图表秀</strong></p><p><a href="https://www.tubiaoxiu.com/">https://www.tubiaoxiu.com/</a></p><p><img src="https://img-blog.csdnimg.cn/b9e1e012cc3d40b79a358c28915b1427.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6L-c5pa555qE5pif,size_20,color_FFFFFF,t_70,g_se,x_16"><br>精美图表向你招手~</p><p><strong>7、其它</strong></p><p>office、wps、一些流程图软件等等，有很多，需要的时候，自己百度就知道了。</p><h2 id="💼三、资源平台"><a href="#💼三、资源平台" class="headerlink" title="💼三、资源平台"></a>💼三、资源平台</h2><p><strong>1、优品PPT</strong></p><p><a href="https://www.ypppt.com/">https://www.ypppt.com/</a></p><p><img src="https://img-blog.csdnimg.cn/d418d1db13f6486f898e97069c584153.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6L-c5pa555qE5pif,size_20,color_FFFFFF,t_70,g_se,x_16"><br>2、PPT宝藏</p><p><a href="http://www.pptbz.com/">http://www.pptbz.com/</a></p><p><img src="https://img-blog.csdnimg.cn/6e8662a245564cebb6cef6ab87c26505.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6L-c5pa555qE5pif,size_20,color_FFFFFF,t_70,g_se,x_16"><br><strong>3、脚本之家（电子书）</strong></p><p><a href="https://www.jb51.net/books/">https://www.jb51.net/books/</a></p><p><img src="https://img-blog.csdnimg.cn/72757f941b944bb9b5a93ce6380df63a.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6L-c5pa555qE5pif,size_20,color_FFFFFF,t_70,g_se,x_16"><br><strong>4、书籍知识库</strong></p><p><a href="https://book.zhishikoo.com/">https://book.zhishikoo.com/</a></p><p><img src="https://img-blog.csdnimg.cn/db06761c619049e3b13f5cb690841e70.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6L-c5pa555qE5pif,size_20,color_FFFFFF,t_70,g_se,x_16"><br><strong>5、数学应用</strong></p><p><a href="https://www.geogebra.org/">https://www.geogebra.org/</a><br><img src="https://img-blog.csdnimg.cn/c7464f490fb94784b3ab47a110875cc5.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6L-c5pa555qE5pif,size_20,color_FFFFFF,t_70,g_se,x_16"><br><strong>6、ico图标制作</strong></p><p><a href="http://www.ico51.cn/">http://www.ico51.cn/</a></p><p><img src="https://img-blog.csdnimg.cn/e770752e2057439490cd35f0258cd38f.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6L-c5pa555qE5pif,size_20,color_FFFFFF,t_70,g_se,x_16"><br><strong>7、硕鼠</strong></p><p><code>最稳定的视频下载平台</code></p><p><a href="https://www.flvcd.com/index.htm">https://www.flvcd.com/index.htm</a><br><img src="https://img-blog.csdnimg.cn/069f2120eaf243db975480016816d99f.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6L-c5pa555qE5pif,size_20,color_FFFFFF,t_70,g_se,x_16"><br><strong>8、术语大全</strong></p><p><a href="https://www.termonline.cn/index">https://www.termonline.cn/index</a></p><p><img src="https://img-blog.csdnimg.cn/68ff2aa533164eccb19772ab5550b0aa.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6L-c5pa555qE5pif,size_20,color_FFFFFF,t_70,g_se,x_16"><br><strong>9、代码转换工具</strong></p><p><a href="https://carbon.now.sh/">https://carbon.now.sh/</a></p><p><img src="https://img-blog.csdnimg.cn/c81c83ac691c4bf4b866cd01d2059318.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6L-c5pa555qE5pif,size_20,color_FFFFFF,t_70,g_se,x_16"><br><strong>10、Deepl翻译</strong></p><p><a href="https://www.deepl.com/translator">https://www.deepl.com/translator</a><br><img src="https://img-blog.csdnimg.cn/d8699fd6adf5467f934071110411be2c.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6L-c5pa555qE5pif,size_20,color_FFFFFF,t_70,g_se,x_16"><br><strong>11、微信公众号</strong></p><p>一些公众号真的很nice，自己取寻找吧！</p><hr><p>本文如果对你有帮助，记得点个赞👍哟，也是对作者最大的鼓励🙇‍♂️。<br>如有不足之处可以在评论区👇多多指正，我会在看到的第一时间进行修正</p>]]></content>
      
      
      <categories>
          
          <category> 总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 总结 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
